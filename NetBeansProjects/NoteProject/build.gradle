apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'application'

repositories {
	mavenCentral()
}
 
mainClassName = "org.jboss.weld.environment.se.StartMain"
 


sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext.artifact='NoteProject'

configurations {
    notes 
    swingbrowser
}

mainClassName = "filterTable.Main"

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    //ext.mainClass = 'filterTable.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}


dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    
    // ... compile dependencies, runtime dependencies, etc.
    notes 'commons-cli:commons-cli:1.2'
    notes('jline:jline:2.11') {
        exclude(group: 'junit', module: 'junit')
    }
    notes 'org.codehaus.groovy:groovy-groovysh:2.2.+'    
    
    compile project('NoteModel')
    
    //spring
    compile group: 'org.springframework', name: 'spring-core', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-context-support', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-tx', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-aop', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-test', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-orm', version:'4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-instrument', version:'3.2.4.RELEASE'
    compile group: 'org.springframework', name: 'spring-agent', version:'2.5.6'
    compile group: 'org.springframework', name: 'spring-aspects', version:'3.1.2.RELEASE'
    
    //cdi
//    compile group: 'javax.inject', name: 'javax.inject', version: '1'
//    compile group: 'javax.enterprise', name: 'cdi-api', version: '1.2'
    
//    runtime group: 'org.jboss.weld.se', name: 'weld-se', version: '2.4.1.Final'
//    compile group: 'org.jboss.weld.se', name: 'weld-se', version: '2.4.1.Final'
    compile 'org.jboss.weld.se:weld-se:2.4.1.Final'
    
       //spring
    runtime group: 'org.springframework', name: 'spring-core', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-context', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-context-support', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-web', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-tx', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-aop', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-test', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-orm', version:'4.0.5.RELEASE'
    runtime group: 'org.springframework', name: 'spring-instrument', version:'3.2.4.RELEASE'
    runtime group: 'org.springframework', name: 'spring-agent', version:'2.5.6'
    runtime group: 'org.springframework', name: 'spring-aspects', version:'3.1.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '1.0.0.RELEASE'
    
    //cdi
    runtime group: 'javax.inject', name: 'javax.inject', version: '1'
    runtime group: 'javax.enterprise', name: 'cdi-api', version: '1.2'
    
    //clean up needed
    runtime group: 'mysql', name: 'mysql-connector-java', version:'5.1.28'
    runtime group: 'javax.el', name: 'el-api', version:'2.2'
    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.6.2'
    runtime group: 'commons-fileupload', name: 'commons-fileupload', version:'1.3'
    runtime group: 'javassist', name: 'javassist', version:'3.8.0.GA'
//    runtime group: 'org.slf4j', name: 'slf4j-simple', version:'1.5.8'
    runtime(group: 'commons-logging', name: 'commons-logging', version:'1.1') {
	exclude(module: 'servlet-api')
    }
    runtime group: 'commons-logging', name: 'commons-logging-api', version:'1.1'
    runtime group: 'net.sf.ehcache', name: 'ehcache-core', version:'2.4.3'

    runtime group: 'commons-collections', name: 'commons-collections', version:'3.2.1'
    runtime group: 'org.apache.commons', name: 'commons-collections4', version:'4.1'
    
    runtime group: 'org.apache.commons', name: 'commons-lang3', version:'3.0'
    runtime (group: 'org.hibernate', name: 'hibernate-entitymanager', version:'4.3.5.Final')
    runtime (group: 'org.hibernate', name: 'hibernate-core', version:'4.3.5.Final')
    runtime (group: 'org.hibernate', name: 'hibernate-envers', version:'4.3.5.Final')
    runtime (group: 'org.hibernate', name: 'hibernate-ehcache', version:'4.3.5.Final')
    runtime group: 'org.hibernate', name: 'hibernate-validator', version:'4.0.2.GA'
    runtime group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version:'1.0.0.Final'

    runtime group: 'javax.servlet', name: 'jstl', version:'1.2'
    runtime group: 'cglib', name: 'cglib-nodep', version:'3.1'

    testCompile group: 'junit', name: 'junit', version:'4.10'
//    testCompile (group: 'org.hibernate', name: 'hibernate-entitymanager', version:'4.0.1.Final')
    
}

    // Create JAR for the project without including its dependencies
    // Include images into the project jar
//    jar {
//        afterEvaluate { Project project ->
//            baseName project.artifact
//            from('src/main/java') {
//                include '**/*.gif'
//                include '**/*.png'
//                /*
//                def updateDBPropertiesConfig = false
//                if (project.hasProperty('updateDBProperties')) {
//                    updateDBPropertiesConfig = project.updateDBProperties.toBoolean()
//                }
//                if (updateDBPropertiesConfig && project.addProductionProperties) {
//                    def productionDbPropertiesFile = "../../shared/production/db.properties"
//                    println "Checking if prod ../../shared/production/db.properties exists"
//                    if (file(productionDbPropertiesFile).exists()) {
//                        println "Updating db properties file for " + project.name
//                        def properties = project.file("src/main/resources/db.properties")
//                        properties.delete()
//                        // Not really sure why we need extra ".." to read the file compared to when we check for existence of the file
//                        properties << new File(productionDbPropertiesFile).getText('UTF-8');
//                    }
//                }
//                */
//            }
//        }
//    }
version = '1.0'
//create a single Jar with all dependencies
task fatJar1(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',  
        	'Implementation-Version': version,
        	'Main-Class': 'filterTable.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

/**
* To create the fatJar containing all dependencies(jars) in the same jar under the libs folder of the main jar file
*/
task fatJar(type: Jar) {
	
	//constructs the libJars string containing all the jars
    def libJars = "";
    configurations.compile.collect { 
        String fileWithoutExt = it.name.take(it.name.lastIndexOf('.'))
	    libJars = libJars+"../libs/"+fileWithoutExt+".jar " 
    }
    
    //Creates the manifest.mf and Class-Path references all the jars included in the libs folder
	manifest {
		attributes 'Implementation-Title': 'Booktopia Jobs Application',
				 'Implementation-Version': version,
                                 'Main-Class': 'filterTable.Main',
				 'Class-Path': libJars
	}

	//create the libs folder and adds all the jars found at the compile path
	into 'libs', {
		from { configurations.compile.collect { it } }
	}
	with jar
}

//task runJar(type: JavaExec) {
//   classpath = files('build/libs/foo.jar')
//   classpath += sourceSets.main.runtimeClasspath
//   main = 'filterTable.Main'
//}



//dependencies {
//
//}

/*
 *Starts the 'notes' application in a separate thread, it will stay even after exited from gradle commondline
*/
task(notes, dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.notes

    def command = [
        'java',
        '-cp', classpath.collect().join(System.getProperty('path.separator')),
        'filterTable.Main',
        '--color'
    ]

    def proc = new ProcessBuilder(command)
        .redirectOutput(ProcessBuilder.Redirect.INHERIT)
        .redirectInput(ProcessBuilder.Redirect.INHERIT)
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .start()

    proc.waitFor()

    if (0 != proc.exitValue()) {
        throw new RuntimeException("console exited with status: ${proc.exitValue()}")
    }
}

/*
 * 'gradle swingbrowser' to start in a separate thread
*/
task(swingbrowser, dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.swingbrowser

    def command = [
        'java',
        '-cp', classpath.collect().join(System.getProperty('path.separator')),
        'stest.SimpleSwingBrowser',
        '--color'
    ]

    def proc = new ProcessBuilder(command)
        .redirectOutput(ProcessBuilder.Redirect.INHERIT)
        .redirectInput(ProcessBuilder.Redirect.INHERIT)
        .redirectError(ProcessBuilder.Redirect.INHERIT)
        .start()

    proc.waitFor()


    if (0 != proc.exitValue()) {
        throw new RuntimeException("console exited with status: ${proc.exitValue()}")
    }
}

/*
project('NoteProject') {
    dependencies{
       compile project(':NoteModel')
    }
} */

