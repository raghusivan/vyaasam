Subject: Proposal for Improved Method to Handle Email Configuration

Hi Ankush and Tulika,

Thank you for your feedback on our recent session. Based on our discussion, I have outlined some amendments to the design, along with additional suggestions for your consideration.

### **Current Design Amendments:**

- **Invocation Method:** Use Postman to invoke the Lambda function via the ALB.
- **Request Handling:** The ALB will forward the HTTP request to Lambda and receive the response.

However, considering the number of parameters we need to handle — such as multiple recipient addresses (To, CC, BCC), file attachments, and other custom fields — I suggest that we explore using a simple JavaScript page hosted on an S3 bucket instead of relying on Postman. Here's why:

### **Advantages of Using a Simple JavaScript Page:**

1. **Ease of Input Handling:**
   - A JavaScript page offers a more user-friendly interface, making it easier to input multiple fields and manage file attachments. This approach also allows for input validation and error handling that Postman does not support.

2. **Dynamic Behavior:**
   - JavaScript can dynamically adapt the form based on user input, providing better interactivity (such as enabling/disabling fields or giving warnings for invalid input) that is not feasible with Postman.

3. **Efficient Attachment Handling:**
   - The JavaScript solution would make it straightforward to handle multiple file attachments, including previewing files and validating their size and type before submission. This is more efficient compared to manually attaching files in Postman.

4. **Automated Polling for Results:**
   - A JavaScript page can implement automatic polling to check the completion status of the Lambda function, a feature that is not available in Postman. This would enable real-time updates and a more streamlined workflow.

### **Parameters to Handle:**

To provide more context, here is the full list of parameters we need to manage for the email configuration:

- **To:** Recipient email addresses (comma-separated)
- **CC:** CC email addresses (comma-separated)
- **BCC:** BCC email addresses (comma-separated)
- **Attachments:** Multiple files of various sizes and formats
- **Sentence Injected in Subject:** Custom text to be inserted in the subject line
- **Sentence Injected in Body:** Custom text to be inserted in the email body
- **Direction:** Email direction (In/Out)
- **Emoji:** Emoji to be included in the email
- **Disclaimer:** Custom disclaimer text
- **Email Format:** Format of the email (Text/HTML)
- **Foreign Characters:** Text containing foreign characters to be included in the email
- **Advertisement Content:** Content for advertisement to be embedded in the email
- **Password Protected Attachments:** Checkbox to indicate if attachments are password protected
- **Reply Chain:** Checkbox to indicate changes in the reply chain (change in participants)

### **Findings So Far:**

1. **Concurrency Limitations:**
   - Lambda functions only scale concurrently with a high volume of incoming requests. Since we're handling a single HTTP request, Lambda will not batch tasks internally.

2. **Batching Process:**
   - To enable batching, the request should go through an initial Lambda function that will handle batching with SQS, as shown in the provided diagram.

3. **Notification and Response Aggregation:**
   - Sending a response after Lambda processing completes is challenging, as multiple Lambda instances may run concurrently. We might need a mechanism to aggregate these responses or consider developing a separate API endpoint to check the status.

### **Next Steps:**

Given the complexity of the parameters and the need for a more flexible solution, I recommend we develop a simple JavaScript page hosted on S3. This will make the process more efficient and user-friendly, with better options for configuration, submission, and monitoring.

Would you be open to scheduling a session to discuss this approach in more detail? We could also use this time to start working on a prototype.

Looking forward to your thoughts.

Best regards,  
[Your Name]  

===========================================


Here’s how the email with the formatted table would look in Microsoft Outlook:

---

**Subject:** Proposal for Improved Email Configuration Handling: Comparative Analysis

Hi Ankush and Tulika,

Thank you for the feedback from our recent session. Based on our discussion, I have considered some alternative approaches to manage the complex set of parameters required for the email configuration, and I suggest we explore using a simple JavaScript page hosted on an S3 bucket.

### **Comparison Matrix: Postman vs. Airflow UI vs. Simple JavaScript Page**

| **Criteria**                          | **Postman**                                         | **Airflow UI**                                       | **Simple JavaScript Page**                          |
|---------------------------------------|-----------------------------------------------------|-------------------------------------------------------|-----------------------------------------------------|
| **Ease of Input Handling**            | Manual input, cumbersome for multiple fields         | Limited to predefined DAGs, not suited for dynamic inputs | Highly flexible, user-friendly form for multiple fields |
| **Dynamic Behavior**                  | Static; no dynamic interaction or real-time validation | Designed for task orchestration, not for dynamic input | Dynamic input handling with validation, interactivity |
| **File Attachment Handling**          | Manual file attachment each time                    | Not designed for direct file handling                 | Efficient multiple file handling with preview and validation |
| **Polling for Results**               | Not possible                                        | Requires DAG configuration for polling                | Automatic polling with real-time status updates     |
| **Scalability**                       | Limited to single request scenarios                 | Scalable but with complexity overhead                 | Scalable for form submissions with simplified setup |
| **Deployment and Hosting**            | No hosting needed, but lacks UI flexibility          | Requires setup and maintenance of Airflow environment | Easily hosted on S3 with minimal setup              |
| **User Experience**                   | Basic, requires repetitive setup for each use case   | Complex UI, less intuitive for non-developers         | Simplified, tailored UI for the specific use case   |

### **Findings and Next Steps:**

Given the complexity of the parameters (To, CC, BCC, attachments, custom text, email formatting, etc.), a simple JavaScript page appears to be the most efficient and flexible solution. It offers a more user-friendly interface, dynamic input handling, and the capability for real-time status updates, which are not feasible with Postman or the Airflow UI.

I propose scheduling a session to discuss this approach further and consider developing a prototype.

Looking forward to your thoughts.

Best regards,  
[Your Name]  

---

To maintain proper formatting in Microsoft Outlook:

1. **Use the table feature** in Outlook by navigating to `Insert` > `Table` and replicating the structure shown above.
2. **Bold and italicize text** by selecting the text and using the toolbar options.
3. Ensure **consistent font style and size** throughout the email for a professional appearance.






Hi [Manager's Name],

I wanted to clarify the capabilities of AWS Lambda concerning the batching of tasks.

After reviewing AWS Lambda's documentation and best practices, I've confirmed that Lambda cannot automatically split a single invocation into multiple concurrent executions or batches. Lambda handles each invocation as a single event in its isolated environment. Therefore, if we have a single request triggering the Lambda function (e.g., from an ALB), Lambda will not automatically batch the tasks internally.

However, Lambda does support concurrent processing if there are multiple requests or events triggering the function. In that case, it can scale horizontally to handle multiple invocations simultaneously, but this is different from handling multiple batches within a single invocation.

To achieve batching or concurrent processing within a single Lambda invocation, we will need to implement custom logic in the Lambda function itself or use additional AWS services like SQS or AWS Step Functions to manage the batching externally.
