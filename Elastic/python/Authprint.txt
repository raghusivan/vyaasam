 I'll modify the script to print the token and add some additional token extraction logic:

```python
import configparser
import requests
import logging
from requests.auth import HTTPBasicAuth
import base64
import urllib3
import json
import re

# Disable SSL warnings for self-signed certificates (use cautiously)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configure logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AuthenticationManager:
    def __init__(self, config_path='config.ini'):
        """
        Initialize authentication with multiple fallback methods
        """
        # Load configuration
        self.config = configparser.ConfigParser()
        self.config.read(config_path)
        
        # Authentication credentials
        self.username = self.config.get('settings', 'username')
        self.password = self.config.get('settings', 'password')
        self.base_url = self.config.get('settings', 'url')
        
        # Authentication tokens and methods
        self.token = None
        self.auth_methods = [
            self.token_auth_method,
            self.basic_auth_method,
            self.bearer_token_method,
            self.digest_auth_method
        ]

    def extract_token(self, response):
        """
        Attempt to extract token from various response formats
        """
        try:
            # Try JSON parsing first
            if response.headers.get('Content-Type', '').lower().startswith('application/json'):
                json_data = response.json()
                
                # Common token key variations
                token_keys = [
                    'access_token', 'token', 'auth_token', 'jwt', 
                    'Authorization', 'accessToken', 'authToken'
                ]
                
                for key in token_keys:
                    if key in json_data:
                        return json_data[key]
            
            # Try extracting from text response
            text_response = response.text
            
            # Regex patterns to find potential tokens
            token_patterns = [
                r'\"?access_token\"?\s*:\s*\"?([^\"{\s,]+)\"?',  # JSON-like token
                r'\"?token\"?\s*:\s*\"?([^\"{\s,]+)\"?',         # Alternative token pattern
                r'Bearer\s+([^\s]+)',                            # Bearer token pattern
            ]
            
            for pattern in token_patterns:
                match = re.search(pattern, text_response, re.IGNORECASE)
                if match:
                    return match.group(1)
            
            # Check headers for token
            auth_header = response.headers.get('Authorization', '')
            if 'Bearer' in auth_header:
                return auth_header.split('Bearer ')[-1].strip()
            
            return None
        
        except Exception as e:
            logger.warning(f"Token extraction error: {e}")
            return None

    def token_auth_method(self):
        """
        Attempt Token-based Authentication
        """
        try:
            # Construct token authentication request
            token_url = f"{self.base_url}/token"
            
            # Multiple token retrieval strategies
            token_strategies = [
                # Strategy 1: Form-based token
                lambda: requests.post(token_url, data={
                    'username': self.username,
                    'password': self.password
                }, verify=False),
                
                # Strategy 2: JSON payload token
                lambda: requests.post(token_url, json={
                    'username': self.username,
                    'password': self.password
                }, verify=False),
                
                # Strategy 3: Header-based token
                lambda: requests.get(token_url, headers={
                    'Authorization': f'Basic {base64.b64encode(f"{self.username}:{self.password}".encode()).decode()}'
                }, verify=False)
            ]
            
            for strategy in token_strategies:
                try:
                    response = strategy()
                    
                    if response.status_code == 200:
                        # Extract token
                        self.token = self.extract_token(response)
                        
                        if self.token:
                            print(f"\n{'='*50}")
                            print(f"âœ… Token Successfully Retrieved!")
                            print(f"Token: {self.token}")
                            print(f"{'='*50}\n")
                            
                            logger.info("Token Authentication Successful")
                            return response
                
                except Exception as strategy_error:
                    logger.warning(f"Token Strategy Failed: {strategy_error}")
            
            logger.warning("All Token Authentication Strategies Failed")
            return None
        
        except requests.exceptions.RequestException as e:
            logger.error(f"Token Auth Error: {e}")
            return None

    def basic_auth_method(self):
        """
        Attempt Basic Authentication
        """
        try:
            response = requests.get(
                self.base_url, 
                auth=HTTPBasicAuth(self.username, self.password),
                verify=False  # Disable SSL verification (use cautiously)
            )
            
            if response.status_code == 200:
                # Try to extract token even from basic auth response
                self.token = self.extract_token(response)
                
                if self.token:
                    print(f"\n{'='*50}")
                    print(f"âœ… Token Retrieved via Basic Auth!")
                    print(f"Token: {self.token}")
                    print(f"{'='*50}\n")
                
                logger.info("Basic Authentication Successful")
                return response
            
            logger.warning(f"Basic Auth Failed: {response.status_code}")
            return None
        
        except requests.exceptions.RequestException as e:
            logger.error(f"Basic Auth Error: {e}")
            return None

    def bearer_token_method(self):
        """
        Attempt Bearer Token Authentication
        """
        try:
            headers = {
                'Authorization': f'Bearer {self.password}',  # Assuming password is actually a bearer token
                'Content-Type': 'application/json'
            }
            
            response = requests.get(
                self.base_url, 
                headers=headers,
                verify=False
            )
            
            if response.status_code == 200:
                # Use existing password as token
                self.token = self.password
                
                print(f"\n{'='*50}")
                print(f"âœ… Bearer Token Validated!")
                print(f"Token: {self.token}")
                print(f"{'='*50}\n")
                
                logger.info("Bearer Token Authentication Successful")
                return response
            
            logger.warning(f"Bearer Token Auth Failed: {response.status_code}")
            return None
        
        except requests.exceptions.RequestException as e:
            logger.error(f"Bearer Token Auth Error: {e}")
            return None

    def digest_auth_method(self):
        """
        Attempt Digest Authentication
        """
        try:
            response = requests.get(
                self.base_url, 
                auth=requests.auth.HTTPDigestAuth(self.username, self.password),
                verify=False
            )
            
            if response.status_code == 200:
                logger.info("Digest Authentication Successful")
                return response
            
            logger.warning(f"Digest Auth Failed: {response.status_code}")
            return None
        
        except requests.exceptions.RequestException as e:
            logger.error(f"Digest Auth Error: {e}")
            return None

    def authenticate(self):
        """
        Attempt authentication using multiple methods
        """
        for method in self.auth_methods:
            try:
                response = method()
                
                if response and response.status_code == 200:
                    return response
            
            except Exception as e:
                logger.error(f"Authentication method failed: {e}")
        
        # If all methods fail
        raise AuthenticationError("All authentication methods failed")

class AuthenticationError(Exception):
    """Custom exception for authentication failures"""
    pass

def main():
    try:
        # Initialize authentication manager
        auth_manager = AuthenticationManager()
        
        # Attempt authentication
        response = auth_manager.authenticate()
        
        # Process successful authentication
        if response:
            logger.info("Successfully authenticated")
            
            # Final print of token if extracted
            if auth_manager.token:
                print(f"\n{'='*50}")
                print(f"ðŸ”‘ Final Authenticated Token: {auth_manager.token}")
                print(f"{'='*50}\n")
            
            # Optional: Print response details for debugging
            print("\nResponse Details:")
            print(f"Status Code: {response.status_code}")
            print(f"Headers: {json.dumps(dict(response.headers), indent=2)}")
            
    except AuthenticationError as auth_err:
        logger.critical(f"Authentication failed completely: {auth_err}")
    except Exception as e:
        logger.critical(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
```

## Key Enhancements

1. **Comprehensive Token Extraction**:
   - Multiple strategies to extract tokens
   - Supports various response formats
   - Regex-based token detection

2. **Detailed Token Printing**:
   - Clear, formatted token output
   - Emoji and separator lines for visibility
   - Prints token at multiple stages of authentication

3. **Enhanced Logging**:
   - Detailed logging of authentication attempts
   - Error tracking for different methods

## Configuration

Ensure your `config.ini` is set up correctly:
```ini
[settings]
username = your_username
password = your_password_or_token
url = https://your-api-endpoint.com
```

## Usage Notes

- Replace placeholders with actual credentials
- Adjust authentication methods for specific API requirements
- The script tries multiple authentication strategies
- Token is extracted and printed if successful

## Security Recommendations

1. Use environment variables for credentials
2. Implement secure token storage
3. Add token expiration and refresh logic
4. Use HTTPS and proper certificate validation

The script now provides a robust, multi-method approach to authentication with clear, formatted token output.
