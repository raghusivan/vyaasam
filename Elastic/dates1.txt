#!/bin/bash

# Check if the Elasticsearch host and dates are provided
if [ $# -lt 4 ]; then
  echo "Usage: $0 <es_host> <index_name> <start_date> <end_date> [query_string]"
  echo "Example: $0 https://your_elasticsearch_host:9200 index_name '2024-03-01T00:00:00+0000' '2024-03-30T23:59:59+0000' 'your_query_string'"
  exit 1
fi

# Assign the Elasticsearch host, index name, start date, and end date from the arguments
ES_HOST="$1"
INDEX_NAME="$2"
START_DATE="$3"
END_DATE="$4"

# Optional query string
QUERY_STRING=""
if [ -n "$5" ]; then
  QUERY_STRING="$5"
fi

USERNAME="your_username"
PASSWORD="your_password"
# Replace these with your actual credentials

# Construct the "must" clauses for the query
MUST_CLAUSES="{
    \"range\": {
      \"created_date\": {
        \"gte\": \"$START_DATE\",
        \"lte\": \"$END_DATE\",
        \"format\": \"yyyy-MM-dd'T'HH:mm:ssZ\"
      }
    }
  }"

# Include the query string if provided
if [ -n "$QUERY_STRING" ]; then
  MUST_CLAUSES="$MUST_CLAUSES,
  {
    \"query_string\": {
      \"query\": \"$QUERY_STRING\"
    }
  }"
fi

# Build the Elasticsearch query
read -r -d '' QUERY << EOM
{
  "size": 10000,
  "_source": ["parent_message_id", "created_date"],
  "query": {
    "bool": {
      "must": [
        $MUST_CLAUSES
      ]
    }
  },
  "sort": [
    {"created_date": {"order": "desc"}}
  ]
}
EOM

# Execute the curl request to Elasticsearch
RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" \
  --header "Content-Type: application/json" \
  --location --request GET "$ES_HOST/$INDEX_NAME/_search" \
  --data-raw "$QUERY")

# Check if the curl command was successful
if [ $? -ne 0 ]; then
  echo "Error: Failed to connect to Elasticsearch."
  exit 1
fi

# Parse the parent_message_id field from the response and count duplicates using jq
echo "$RESPONSE" | jq -r '.hits.hits[]._source.parent_message_id' | sort | uniq -d


=======================================

#!/bin/bash

# Check if the Elasticsearch host and dates are provided
if [ $# -lt 4 ]; then
  echo "Usage: $0 <es_host> <index_name> <start_date> <end_date> [query_string]"
  echo "Example: $0 https://your_elasticsearch_host:9200 index_name '2023-09-01T00:00:00' '2023-09-30T23:59:59' 'your_query_string'"
  exit 1
fi

# Assign the Elasticsearch host, index name, start date, and end date from the arguments
ES_HOST="$1"
INDEX_NAME="$2"
START_DATE="$3"
END_DATE="$4"

# Optional query string
QUERY_STRING=""
if [ -n "$5" ]; then
  QUERY_STRING="$5"
fi

USERNAME="your_username"
PASSWORD="your_password"
# Replace these with your actual credentials

# Construct the "must" clauses for the query
MUST_CLAUSES="{
    \"range\": {
      \"@timestamp\": {
        \"gte\": \"$START_DATE\",
        \"lte\": \"$END_DATE\"
      }
    }
  }"

# Include the query string if provided
if [ -n "$QUERY_STRING" ]; then
  MUST_CLAUSES="$MUST_CLAUSES,
  {
    \"query_string\": {
      \"query\": \"$QUERY_STRING\"
    }
  }"
fi

# Build the Elasticsearch query
read -r -d '' QUERY << EOM
{
  "size": 10000,
  "_source": ["parent_message_id", "@timestamp"],
  "query": {
    "bool": {
      "must": [
        $MUST_CLAUSES
      ]
    }
  },
  "sort": [
    {"@timestamp": {"order": "desc"}}
  ]
}
EOM

# Execute the curl request to Elasticsearch
RESPONSE=$(curl -s -u "$USERNAME:$PASSWORD" \
  --header "Content-Type: application/json" \
  --location --request GET "$ES_HOST/$INDEX_NAME/_search" \
  --data-raw "$QUERY")

# Check if the curl command was successful
if [ $? -ne 0 ]; then
  echo "Error: Failed to connect to Elasticsearch."
  exit 1
fi

# Parse the parent_message_id field from the response and count duplicates using jq
echo "$RESPONSE" | jq -r '.hits.hits[]._source.parent_message_id' | sort | uniq -d
