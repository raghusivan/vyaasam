import requests
from requests.auth import HTTPBasicAuth
import urllib3
import json
from datetime import datetime

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class TokenAuthAPI:
    def __init__(self, base_url, username, password):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.session.verify = False
        self.token = None

    def get_token(self):
        """Get authentication token using Basic Auth"""
        try:
            # The authentication endpoint - adjust if different
            auth_url = f"{self.base_url}/auth"
            
            # Using Basic Auth to get token
            response = self.session.get(
                auth_url,
                auth=HTTPBasicAuth(self.username, self.password),
                headers={'Content-Type': 'application/json'}
            )
            
            print(f"Auth Request URL: {response.url}")
            print(f"Auth Status Code: {response.status_code}")
            print(f"Auth Response Headers: {dict(response.headers)}")
            
            if response.status_code == 200:
                # Assuming token is in response body - adjust based on actual response format
                auth_data = response.json()
                self.token = auth_data.get('token')  # Adjust key based on actual response
                print("Token obtained successfully")
                return True
            else:
                print(f"Failed to get token. Status: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"Error getting token: {str(e)}")
            return False

    def execute_request(self, endpoint, method='GET', params=None, headers=None):
        """Execute API request with token authentication"""
        # First ensure we have a token
        if not self.token and not self.get_token():
            print("Failed to obtain authentication token")
            return None
            
        url = f"{self.base_url}{endpoint}"
        
        # Set up headers with token
        default_headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {self.token}'  # Using Bearer token auth
        }
        
        if headers:
            default_headers.update(headers)
            
        try:
            response = self.session.request(
                method=method,
                url=url,
                params=params,
                headers=default_headers
            )
            
            print(f"\nAPI Request URL: {response.url}")
            print(f"API Status Code: {response.status_code}")
            print(f"API Response Headers: {dict(response.headers)}")
            
            if response.status_code == 401:
                # Token might be expired, try to get a new one
                print("Token might be expired, trying to refresh...")
                if self.get_token():
                    # Retry the request with new token
                    default_headers['Authorization'] = f'Bearer {self.token}'
                    response = self.session.request(
                        method=method,
                        url=url,
                        params=params,
                        headers=default_headers
                    )
                else:
                    print("Failed to refresh token")
                    return None
            
            # Handle different response types
            try:
                return response.json()
            except json.JSONDecodeError:
                return response.text
                
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {str(e)}")
            return None

# Usage example
if __name__ == "__main__":
    # API configuration
    BASE_URL = "https://core1.uat.core.commsurv.syd.non.c1.macquarie.com"
    USERNAME = "your_username"  # Replace with actual username
    PASSWORD = "your_password"  # Replace with actual password
    
    # Initialize API client
    api = TokenAuthAPI(BASE_URL, USERNAME, PASSWORD)
    
    # Set up request parameters
    params = {
        "start-datetime": "2024-07-09T12:31:17.123",
        "end-datetime": "2024-08-09T12:31:17.123",
        "status": "QA â€“ Incorrect Closure"
    }
    
    # Execute request
    response = api.execute_request(
        endpoint="/conduct_surveillance/api/ecomm_production_20200929/case_management/messages",
        params=params
    )
    
    if response:
        print("\nAPI Response:")
        print(json.dumps(response, indent=2) if isinstance(response, (dict, list)) else response)
    else:
        print("\nNo valid response received")

# Function to test the authentication flow
def test_auth_flow(username, password, base_url):
    """Test authentication flow with detailed output"""
    print("\nTesting Authentication Flow:")
    api = TokenAuthAPI(base_url, username, password)
    
    print("\n1. Getting Token:")
    success = api.get_token()
    print(f"Token obtained: {bool(api.token)}")
    
    if success:
        print("\n2. Testing API Call:")
        test_response = api.execute_request("/your-test-endpoint")
        print(f"Test call successful: {bool(test_response)}")
        return api
    return None
