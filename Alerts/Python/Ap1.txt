import configparser
import urllib.parse
from datetime import datetime, timedelta
import requests
import json
import sys
import os
import logging
import base64
from zoneinfo import ZoneInfo
from typing import Dict, List, Any, Optional, Tuple

class AlertProcessor:
    def __init__(self, config_path: str = 'config.ini'):
        self.config_path = config_path
        self.config = self._load_config()
        self.logger = self._setup_logging()
        self.timezone = self._setup_timezone()
        self.session = None
        self.auth_header = None
        self._init_session()

    def _load_config(self) -> Dict:
        if not os.path.exists(self.config_path):
            raise FileNotFoundError(f"Config file not found: {self.config_path}")
            
        config = configparser.ConfigParser(interpolation=None)
        config.read(self.config_path)
        
        required_sections = ['authentication', 'settings', 'statuses']
        missing_sections = [sect for sect in required_sections if sect not in config.sections()]
        if missing_sections:
            raise ValueError(f"Missing required sections: {', '.join(missing_sections)}")

        return {section: dict(config[section]) for section in config.sections()}

    def _setup_logging(self) -> logging.Logger:
        logger = logging.getLogger('AlertProcessor')
        logger.setLevel(logging.INFO)

        console_handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s',
                                    datefmt='%Y-%m-%d %H:%M:%S')
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        logger.propagate = False

        return logger

    def _setup_timezone(self) -> ZoneInfo:
        tz_name = self.config['settings'].get('timezone', 'UTC')
        try:
            return ZoneInfo(tz_name)
        except Exception as e:
            self.logger.error(f"Invalid timezone {tz_name}, using UTC: {str(e)}")
            return ZoneInfo('UTC')

    def _init_session(self) -> None:
        self.session = requests.Session()
        self.session.verify = False  # Similar to Chrome's behavior in the example
        
        # Create the exact Authorization header that Chrome uses
        username = self.config['authentication']['username']
        password = self.config['authentication'].get('password', raw=True)
        credentials = f"{username}:{password}"
        b64_credentials = base64.b64encode(credentials.encode()).decode()
        self.auth_header = f"Basic {b64_credentials}"
        
        # Set headers exactly as shown in the example
        self.session.headers.update({
            'Authorization': self.auth_header,
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })

    def make_request(self, url: str, method: str = 'GET', params: Dict = None) -> Dict:
        try:
            response = self.session.request(
                method=method,
                url=url,
                headers=self.session.headers,
                params=params
            )
            
            self.logger.debug(f"Request Details:")
            self.logger.debug(f"URL: {response.url}")
            self.logger.debug(f"Method: {method}")
            self.logger.debug(f"Headers Sent: {self.session.headers}")
            self.logger.debug(f"Response Details:")
            self.logger.debug(f"Status Code: {response.status_code}")
            self.logger.debug(f"Response Headers: {dict(response.headers)}")
            
            response.raise_for_status()
            
            try:
                return response.json()
            except json.JSONDecodeError:
                return response.text
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"Request failed: {str(e)}")
            return None

    def _get_date_range(self) -> Tuple[str, str]:
        days = int(self.config['settings']['days_to_retrieve'])
        end_time = datetime.now(self.timezone)
        start_time = end_time - timedelta(days=days)
        return start_time.strftime('%Y-%m-%d'), end_time.strftime('%Y-%m-%d')

    def _filter_resolved_alerts(self, alerts: List[Dict]) -> List[Dict]:
        return [
            alert for alert in alerts
            if (
                alert.get('resolved') is True and
                alert.get('status', '').lower().startswith('closed') and
                alert.get('state', '').lower() == 'closed' and
                alert.get('resolutionState', '').lower() == 'resolved'
            )
        ]

    def execute_request(self, status: str) -> Dict:
        try:
            start_date, end_date = self._get_date_range()
            params = {
                'start_datetime': start_date,
                'end_datetime': end_date,
                'status': status
            }
            
            url = self.config['settings']['url'].rstrip('/')
            response_data = self.make_request(url, params=params)
            
            if response_data:
                if isinstance(response_data, dict) and 'alerts' in response_data:
                    all_alerts = response_data['alerts']
                    filtered_alerts = self._filter_resolved_alerts(all_alerts)
                    return {
                        'alerts': filtered_alerts,
                        'total': len(all_alerts),
                        'filtered': len(filtered_alerts)
                    }
                else:
                    self.logger.error("Invalid response format")
                    return {'error': 'Invalid response format'}
            else:
                return {'error': 'Request failed'}

        except Exception as e:
            self.logger.error(f"Error processing status {status}: {str(e)}")
            return {'error': str(e)}

    def run(self) -> Dict[str, Any]:
        self.logger.info(f"Starting alert processing in timezone: {self.timezone}")
        results = {}
        totals = {'alerts': 0, 'resolved': 0, 'errors': 0}

        for status_key, status_value in self.config['statuses'].items():
            result = self.execute_request(status_value)
            
            if 'error' not in result:
                totals['alerts'] += result['total']
                totals['resolved'] += result['filtered']
                self.logger.info(
                    f"Status {status_key}: {result['filtered']} resolved out of {result['total']}"
                )
            else:
                totals['errors'] += 1
                self.logger.error(f"Failed processing {status_key}: {result['error']}")
                
            results[status_key] = result

        results['summary'] = {
            'total_alerts': totals['alerts'],
            'total_resolved': totals['resolved'],
            'total_errors': totals['errors'],
            'date_range': {'start': start_date, 'end': end_date},
            'timezone': str(self.timezone)
        }

        self.logger.info(
            f"Processing complete - Total: {totals['alerts']}, "
            f"Resolved: {totals['resolved']}, Errors: {totals['errors']}"
        )
        
        return results

def main():
    try:
        processor = AlertProcessor()
        results = processor.run()
        
        if results.get('summary', {}).get('total_errors', 0) > 0:
            sys.exit(1)
            
    except Exception as e:
        print(f"Critical error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
