import os
import base64
from configparser import ConfigParser
import requests
from urllib.parse import quote
from logger_config import setup_logger

class HttpClient:
    def __init__(self, username: str, password: str):
        self.logger = setup_logger("HttpClient")
        self.session = self._init_session(username, password)

    @staticmethod
    def get_smtp_password_s3():
        try:
            temp_dir = "/Users/rvenkat9/scripts/alerts/src/dec6/app/certs"
            cert_files = {
                'FOR-Risk-DigitalReasoning-CyberArk-use.pem': 'cert_path',
                'private-key.key': 'key_path',
                'Macquarie-Root-CA.cer': 'ca_cert_path',
            }
            
            local_paths = {}
            if not os.path.exists(temp_dir):
                raise FileNotFoundError(f"Temp directory not found: {temp_dir}")

            for file_name, key in cert_files.items():
                full_path = os.path.join(temp_dir, file_name)
                if os.path.exists(full_path):
                    local_paths[key] = full_path
                else:
                    raise FileNotFoundError(f"Required file missing: {full_path}")

            config = ConfigParser()
            config_file = './config.ini'
            if not os.path.exists(config_file):
                raise FileNotFoundError(f"Config file not found: {config_file}")

            config.read(config_file)
            api_config = config['API']

            base_url = api_config['url']
            app_id = quote(api_config['app_id'])
            safe = quote(api_config['safe'])
            username = quote(api_config['username'])
            address = quote(api_config['address']).replace('+', '%20')

            full_url = (
                f"{base_url}"
                f"?AppID={app_id}"
                f"&Safe={safe}"
                f"&Username={username}"
                f"&Address={address}"
            )

            response = requests.get(
                full_url,
                cert=(local_paths['cert_path'], local_paths['key_path']),
                verify=local_paths['ca_cert_path'],
                timeout=30
            )

            if response.status_code == 200:
                return response.json().get('Content')
            else:
                raise requests.exceptions.RequestException(
                    f"Failed with status {response.status_code}: {response.text}"
                )

        except Exception as e:
            print(f"Error getting SMTP password: {str(e)}")
            return None

    def _init_session(self, username: str, password: str) -> requests.Session:
        session = requests.Session()
        session.verify = False
        
        smtp_password = self.get_smtp_password_s3()
        if not smtp_password:
            self.logger.error("Failed to get SMTP password")
            raise ValueError("Could not retrieve SMTP password")

        credentials = f"{username}:{smtp_password}"
        auth_header = base64.b64encode(credentials.encode()).decode()
        
        session.headers.update({
            'Authorization': f'Basic {auth_header}',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'keep-alive',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
        return session

    def get(self, url: str) -> dict:
        try:
            response = self.session.get(url, timeout=30)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            self.logger.error(f"Request failed: {str(e)}")
            raise
