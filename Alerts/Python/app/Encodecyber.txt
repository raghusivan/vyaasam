To encode the Address parameter and print the complete URL used for the API request, we can use Python's urllib.parse module. Here's the updated code with these enhancements:


---

Updated Code:

import os
import requests
from configparser import ConfigParser
from urllib.parse import urlencode

class HttpClient:
    def __init__(self, username: str, password: str):
        self.logger = setup_logger("HttpClient")
        self.session = self._init_session(username, password)

    @staticmethod
    def get_smtp_password_s3():
        try:
            # Lambda temporary directory for files
            temp_dir = "/Users/rvenkat9/scripts/alerts/src/dec6/app/certs"

            # Map specific file names to local paths
            cert_files = {
                'FOR-Risk-DigitalReasoning-CyberArk-use.pem': 'cert_path',
                'private-key.key': 'key_path',
                'Macquarie-Root-CA.cer': 'ca_cert_path',
            }

            local_paths = {}

            # Verify that the directory exists
            if not os.path.exists(temp_dir):
                print(f"[ERROR] Temp directory does not exist: {temp_dir}")
                raise FileNotFoundError(f"Temp directory not found: {temp_dir}")

            # Verify and map all files
            for file_name, key in cert_files.items():
                full_path = os.path.join(temp_dir, file_name)
                print(f"[DEBUG] Checking file: {full_path}")
                if os.path.exists(full_path):
                    local_paths[key] = full_path
                    print(f"[INFO] File found: {full_path}")
                else:
                    print(f"[ERROR] File not found: {full_path}")
                    raise FileNotFoundError(f"Required file missing: {full_path}")

            # Prepare API request config
            config = ConfigParser()
            config_file = './config.ini'

            # Verify if the config file exists
            print(f"[DEBUG] Checking config file: {config_file}")
            if not os.path.exists(config_file):
                print(f"[ERROR] Config file not found: {config_file}")
                raise FileNotFoundError(f"Config file not found: {config_file}")

            config.read(config_file)
            api_config = config['API']

            # Debugging API Config
            print(f"[DEBUG] API Config: {api_config}")

            # Encode the address parameter
            address_encoded = urlencode({"Address": api_config['address']})  # Encodes the address
            print(f"[DEBUG] Encoded Address: {address_encoded}")

            # Construct the full URL
            base_url = api_config['url']
            params = {
                'AppID': api_config['app_id'],
                'Safe': api_config['safe'],
                'Username': api_config['username'],
                'Address': api_config['address'],
            }
            full_url = f"{base_url}?{urlencode(params)}"
            print(f"[INFO] Full API URL: {full_url}")

            # Make the API request
            print(f"[INFO] Making API request to {base_url}")
            response = requests.get(
                base_url,
                params=params,
                cert=(local_paths['cert_path'], local_paths['key_path']),
                verify=local_paths['ca_cert_path'],
                timeout=30,
            )

            print(f"[DEBUG] Response Status Code: {response.status_code}")
            if response.status_code == 200:
                print(f"[INFO] API request successful. Extracting content.")
                return response.json().get('Content')
            else:
                print(f"[ERROR] Failed to get password. Status code: {response.status_code}")
                print(f"[DEBUG] Response Content: {response.text}")
                return None

        except FileNotFoundError as fnf_error:
            print(f"[ERROR] FileNotFoundError: {str(fnf_error)}")
            return None
        except Exception as e:
            print(f"[ERROR] Unexpected error: {str(e)}")
            return None

    def _init_session(self, username: str, password: str) -> requests.Session:
        self.logger.debug("Initializing HTTP session with auth")
        session = requests.Session()
        session.verify = False
        smtp_password = self.get_smtp_password_s3()  # Use the method
        print(f"[DEBUG] Retrieved SMTP Password: {smtp_password}")
        return session


---

Enhancements:

1. Encoding the Address:

Used urllib.parse.urlencode to encode the Address parameter. This ensures special characters (e.g., spaces, @, etc.) in the address are properly escaped.


Example:

address_encoded = urlencode({"Address": api_config['address']})
print(f"[DEBUG] Encoded Address: {address_encoded}")


2. Constructing and Printing the Full URL:

Used urlencode to encode all query parameters.

Constructed and printed the complete URL to debug exactly what is being sent to the API.


Example:

full_url = f"{base_url}?{urlencode(params)}"
print(f"[INFO] Full API URL: {full_url}")


3. Enhanced Debugging:

Logs the encoded Address.

Logs the full URL before making the API request.





---

Output Example (Debug Log):

[DEBUG] Checking config file: ./config.ini
[INFO] File found: ./config.ini
[DEBUG] API Config: {'url': 'https://api.example.com', 'app_id': '123', 'safe': 'my_safe', 'username': 'user', 'address': 'some address'}
[DEBUG] Encoded Address: Address=some%20address
[INFO] Full API URL: https://api.example.com?AppID=123&Safe=my_safe&Username=user&Address=some%20address
[INFO] Making API request to https://api.example.com
[DEBUG] Response Status Code: 200
[INFO] API request successful. Extracting content.


---

Why This is Useful:

Encoding: Ensures special characters in Address (or any parameter) donâ€™t break the API call.

Full URL Debugging: Helps debug issues by seeing the exact URL being sent to the API.

Error Handling: Includes detailed error logs if the API call fails.


Let me know if you need further assistance!

