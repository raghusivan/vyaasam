import os
import base64
from configparser import ConfigParser
import requests
from urllib.parse import quote, unquote
from logger_config import setup_logger

class HttpClient:
   def __init__(self, username: str, password: str):
       self.logger = setup_logger("HttpClient")
       print("\n=== Initializing HTTP Client ===")
       print(f"Username: {username}")
       self.session = self._init_session(username, password)

   @staticmethod 
   def get_smtp_password_s3():
       try:
           print("\n=== Starting SMTP Password Retrieval ===")
           temp_dir = "/Users/rvenkat9/scripts/alerts/src/dec6/app/certs"
           print(f"Certificate Directory: {temp_dir}")
           
           cert_files = {
               'FOR-Risk-DigitalReasoning-CyberArk-use.pem': 'cert_path',
               'private-key.key': 'key_path',
               'Macquarie-Root-CA.cer': 'ca_cert_path',
           }
           
           print("\nChecking Certificate Files:")
           local_paths = {}
           if not os.path.exists(temp_dir):
               print(f"ERROR: Directory not found - {temp_dir}")
               raise FileNotFoundError(f"Temp directory not found: {temp_dir}")

           for file_name, key in cert_files.items():
               full_path = os.path.join(temp_dir, file_name)
               print(f"Checking {file_name}: ", end='')
               if os.path.exists(full_path):
                   local_paths[key] = full_path
                   print("Found ✓")
               else:
                   print("Not Found ✗")
                   raise FileNotFoundError(f"Required file missing: {full_path}")

           print("\n=== Loading Configuration ===")
           config = ConfigParser()
           config_file = './config.ini'
           print(f"Config File Path: {config_file}")
           
           if not os.path.exists(config_file):
               print("ERROR: Config file not found")
               raise FileNotFoundError(f"Config file not found: {config_file}")

           config.read(config_file)
           api_config = config['API']

           print("\n=== URL Construction Steps ===")
           # Print raw values before encoding
           print("\nRaw Values:")
           print(f"Base URL: {api_config['url']}")
           print(f"App ID: {api_config['app_id']}")
           print(f"Safe: {api_config['safe']}")
           print(f"Username: {api_config['username']}")
           print(f"Address: {api_config['address']}")

           # URL encoding step by step
           base_url = api_config['url'].strip()
           print("\nEncoding Parameters:")
           
           app_id = quote(api_config['app_id'].strip())
           print(f"Encoded App ID: {app_id}")
           
           safe = quote(api_config['safe'].strip())
           print(f"Encoded Safe: {safe}")
           
           username = quote(api_config['username'].strip())
           print(f"Encoded Username: {username}")
           
           # Special handling for address
           address = api_config['address'].strip()
           address_encoded = quote(address, safe='')
           address_final = address_encoded.replace('+', '%20')
           print(f"Address (Original): {address}")
           print(f"Address (Encoded): {address_encoded}")
           print(f"Address (Final): {address_final}")

           # Constructing final URL
           full_url = (
               f"{base_url}"
               f"?AppID={app_id}"
               f"&Safe={safe}"
               f"&Username={username}"
               f"&Address={address_final}"
           )

           print("\n=== Final URL ===")
           print(f"URL: {full_url}")
           print(f"URL decoded for verification: {unquote(full_url)}")

           print("\n=== Making API Request ===")
           print("Request Details:")
           print(f"Cert Path: {local_paths['cert_path']}")
           print(f"Key Path: {local_paths['key_path']}")
           print(f"CA Cert Path: {local_paths['ca_cert_path']}")

           response = requests.get(
               full_url,
               cert=(local_paths['cert_path'], local_paths['key_path']),
               verify=local_paths['ca_cert_path'],
               timeout=30
           )

           print(f"\nResponse Status Code: {response.status_code}")
           print(f"Response Headers: {dict(response.headers)}")
           
           if response.status_code == 200:
               content = response.json().get('Content')
               print("Successfully retrieved content")
               return content
           else:
               print(f"ERROR: Request failed with status code {response.status_code}")
               print(f"Response Text: {response.text[:200]}...")  # First 200 chars
               raise requests.exceptions.RequestException(
                   f"Failed with status {response.status_code}: {response.text}"
               )

       except Exception as e:
           print(f"\n=== ERROR OCCURRED ===")
           print(f"Error Type: {type(e).__name__}")
           print(f"Error Message: {str(e)}")
           print("Stack Trace:")
           import traceback
           traceback.print_exc()
           return None

   def _init_session(self, username: str, password: str) -> requests.Session:
       print("\n=== Initializing HTTP Session ===")
       session = requests.Session()
       session.verify = False
       
       print("Getting SMTP password...")
       smtp_password = self.get_smtp_password_s3()
       if not smtp_password:
           print("ERROR: Failed to retrieve SMTP password")
           raise ValueError("Could not retrieve SMTP password")

       print("Creating authentication header...")
       credentials = f"{username}:{smtp_password}"
       auth_header = base64.b64encode(credentials.encode()).decode()
       
       print("Setting up session headers...")
       headers = {
           'Authorization': f'Basic {auth_header}',
           'Accept': '*/*',
           'Accept-Encoding': 'gzip, deflate, br',
           'Accept-Language': 'en-US,en;q=0.9',
           'Connection': 'keep-alive',
           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
       }
       
       session.headers.update(headers)
       print("Headers configured:")
       for key, value in headers.items():
           if key.lower() != 'authorization':  # Don't print auth header
               print(f"  {key}: {value}")
       
       return session

   def get(self, url: str) -> dict:
       print(f"\n=== Making GET Request ===")
       print(f"URL: {url}")
       try:
           print("Sending request...")
           response = self.session.get(url, timeout=30)
           print(f"Response Status: {response.status_code}")
           
           response.raise_for_status()
           print("Request successful")
           
           data = response.json()
           print(f"Response data keys: {list(data.keys())}")
           return data
           
       except Exception as e:
           print("\n=== Request Error ===")
           print(f"Error Type: {type(e).__name__}")
           print(f"Error Message: {str(e)}")
           if hasattr(e, 'response'):
               print(f"Response Status: {e.response.status_code}")
               print(f"Response Text: {e.response.text[:200]}...")
           raise
