import configparser
import urllib.parse
from datetime import datetime, timedelta
import requests
import json
import sys
import os
import logging
import base64
from zoneinfo import ZoneInfo
from typing import Dict, List, Any, Optional, Tuple

class AlertProcessor:
    # ... (previous initialization code remains same) ...

    def _build_url(self, status: str, start_date: str, end_date: str) -> str:
        """
        Construct URL in the format:
        https://core1.uat.core.commsurv.syd.non.c1.macquarie.com:9200/conduct_surveillance_20200929/case_management/messages
        """
        base_url = self.config['settings']['url'].rstrip('/')
        path = "/conduct_surveillance_20200929/case_management/messages"
        url = f"{base_url}{path}"
        
        params = {
            'start_datetime': start_date,
            'end_datetime': end_date,
            'status': status
        }
        full_url = f"{url}?{urllib.parse.urlencode(params)}"
        self.logger.debug(f"Constructed URL: {full_url}")
        return full_url

    def make_request(self, url: str, method: str = 'GET', params: Dict = None) -> Dict:
        try:
            response = self.session.request(
                method=method,
                url=url
            )
            response.raise_for_status()
            return response.json() if response.text else {}
        except requests.exceptions.RequestException as e:
            self.logger.error(f"Request failed: {str(e)}")
            return None
        except json.JSONDecodeError:
            return {}

    def execute_request(self, status: str) -> Dict:
        try:
            start_date, end_date = self._get_date_range()
            url = self._build_url(status, start_date, end_date)
            response_data = self.make_request(url)
            
            if response_data:
                if isinstance(response_data, dict) and 'alerts' in response_data:
                    all_alerts = response_data['alerts']
                    filtered_alerts = self._filter_resolved_alerts(all_alerts)
                    return {
                        'alerts': filtered_alerts,
                        'total': len(all_alerts),
                        'filtered': len(filtered_alerts)
                    }
            return {'error': 'Invalid response format'}

        except Exception as e:
            self.logger.error(f"Error processing status {status}: {str(e)}")
            return {'error': str(e)}

    # ... (rest of the code remains same) ...
