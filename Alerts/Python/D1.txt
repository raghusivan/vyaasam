def _build_url(self, status: str, start_date: str, end_date: str) -> str:
    """
    Build URL without URL encoding for dates, only encode the status
    Example format:
    https://core1.uat.core.commsurv.syd.non.c1.macquarie.com/conduct_surveillance/api/ecomm_production_20200929/case_management/messages?start_datetime=2024-07-09T12:31:17.123&end_datetime=2024-08-09T12:31:17.123&status=QA%20-%20Issue%20-%20Incorrect%20Closure
    """
    base_url = self.config['settings']['url'].rstrip('/')
    path = "/conduct_surveillance/api/ecomm_production_20200929/case_management/messages"
    
    # Don't encode dates, only encode status
    encoded_status = urllib.parse.quote(status)
    
    # Construct URL manually to prevent automatic encoding of date values
    full_url = (
        f"{base_url}{path}"
        f"?start_datetime={start_date}"
        f"&end_datetime={end_date}"
        f"&status={encoded_status}"
    )
    
    self.logger.debug(f"Constructed URL: {full_url}")
    return full_url

def _get_date_range(self) -> Tuple[str, str]:
    """Get exact date format: 2024-07-09T12:31:17.123"""
    try:
        start_datetime = datetime.strptime(
            self.config['settings']['start_datetime'],
            '%Y-%m-%dT%H:%M:%S.%f'
        )
        
        days = int(self.config['settings']['days_to_retrieve'])
        end_datetime = start_datetime + timedelta(days=days)
        
        # Format exactly as needed without any encoding
        return (
            f"{start_datetime.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3]}",
            f"{end_datetime.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3]}"
        )
    except Exception as e:
        self.logger.error(f"Error calculating date range: {str(e)}")
        raise

def process_status(self, status: str) -> Dict:
    """Process a single status with proper URL construction"""
    try:
        start_date, end_date = self._get_date_range()
        url = self._build_url(status, start_date, end_date)
        
        self.logger.info(f"Processing status: {status}")
        response = self.session.get(url, timeout=30)
        
        if response.status_code == 404:
            self.logger.error(f"404 Error for status {status}: URL not found")
            return {'error': 'URL not found'}
        
        response.raise_for_status()
        
        data = response.json()
        if isinstance(data, dict) and 'alerts' in data:
            all_alerts = data['alerts']
            filtered_alerts = self._filter_resolved_alerts(all_alerts)
            return {
                'alerts': filtered_alerts,
                'total': len(all_alerts),
                'filtered': len(filtered_alerts)
            }
        
        return {'error': 'Invalid response format'}
        
    except requests.exceptions.RequestException as e:
        self.logger.error(f"Request failed for status {status}: {str(e)}")
        return {'error': str(e)}
    except Exception as e:
        self.logger.error(f"Error processing status {status}: {str(e)}")
        return {'error': str(e)}
