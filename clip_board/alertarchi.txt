Below is a revised, professionally spaced draw.io (mxGraph) XML diagram. This version shows the overall architecture with two alternative staging options for the API response JSON files—either stored in your existing MySQL database or in an S3 bucket. (A brief note explains that S3 is generally faster and more scalable for large files.) The diagram also clearly shows how Airflow/MWAA (via an ALB) triggers the Coordinator Lambda, which stages the alert records and sends SQS messages. The Worker Lambda (triggered in batches of up to 100 messages) retrieves the staged JSON (from MySQL or S3), uploads it to an SFTP server, and updates the record in MySQL. Finally, a CloudWatch Scheduler automatically triggers the Finalizer Lambda that queries the staging system to determine if all alerts are complete and finalizes the job.

Comparison Note:
• MySQL DB (Staging):
 – Already set up and simple to integrate
 – May be slower when handling very large JSON files (≈200 KB each)
• S3 Bucket (Staging):
 – Optimized for large, high‐throughput objects; typically faster and more scalable
 – Requires storing and later referencing S3 keys in your tracker

To import this diagram into draw.io:

1. Copy the XML below into a text file (e.g. architecture_diagram.xml).


2. Open draw.io.


3. Choose File → Import From → Device and select your file.



Below is the XML code:

<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)" version="26.0.11">
  <diagram name="Architecture Diagram" id="a5u9a0QQ8WCnMxA336eS">
    <mxGraphModel dx="1500" dy="850" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1600" pageHeight="1200" math="0" shadow="0">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
        
        <!-- Airflow / MWAA -->
        <mxCell id="node_airflow" value="Airflow / MWAA" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#DAE8FC;strokeColor=#6C8EBF;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="50" y="50" width="150" height="60" as="geometry"/>
        </mxCell>
        
        <!-- ALB -->
        <mxCell id="node_alb" value="ALB (Application Load Balancer)" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFE6CC;strokeColor=#D79B00;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="250" y="50" width="180" height="60" as="geometry"/>
        </mxCell>
        
        <!-- Coordinator Lambda -->
        <mxCell id="node_coord" value="Coordinator Lambda" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#F8CECC;strokeColor=#B85450;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="470" y="50" width="220" height="100" as="geometry"/>
        </mxCell>
        
        <!-- Coordinator Pseudocode -->
        <mxCell id="node_coord_note" value="Pseudocode:
• For status in 1..20:
  – fetch_alerts(status)
• Aggregate alerts
• For each alert:
  – Stage record (MySQL OR S3)
  – Send SQS message (pointer)" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFF2CC;strokeColor=#D6B656;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="470" y="160" width="220" height="80" as="geometry"/>
        </mxCell>
        
        <!-- Staging: MySQL DB (RDS) -->
        <mxCell id="node_mysql" value="MySQL DB (Staging)" style="shape=database;rounded=1;whiteSpace=wrap;html=1;fillColor=#FFF2CC;strokeColor=#D6B656;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="470" y="260" width="220" height="100" as="geometry"/>
        </mxCell>
        
        <!-- Staging: S3 Bucket -->
        <mxCell id="node_s3" value="S3 Bucket (Staging)" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#D5E8D4;strokeColor=#82B366;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="470" y="380" width="220" height="100" as="geometry"/>
        </mxCell>
        
        <!-- SQS Queue -->
        <mxCell id="node_sqs" value="SQS Queue" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#E1F5FE;strokeColor=#0288D1;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="730" y="50" width="160" height="60" as="geometry"/>
        </mxCell>
        
        <!-- Worker Lambda -->
        <mxCell id="node_worker" value="Worker Lambda" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FCE4EC;strokeColor=#AD1457;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="930" y="50" width="220" height="100" as="geometry"/>
        </mxCell>
        
        <!-- Worker Pseudocode -->
        <mxCell id="node_worker_note" value="Pseudocode:
• Receive up to 100 SQS messages
• For each message:
  – Retrieve alert record (from MySQL OR S3)
  – Upload JSON file to SFTP
  – Update status to 'completed'" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFF2CC;strokeColor=#D6B656;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="930" y="160" width="220" height="80" as="geometry"/>
        </mxCell>
        
        <!-- SFTP Server -->
        <mxCell id="node_sftp" value="SFTP Server" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#E0E0E0;strokeColor=#757575;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="930" y="260" width="220" height="70" as="geometry"/>
        </mxCell>
        
        <!-- CloudWatch Scheduler -->
        <mxCell id="node_cw" value="CloudWatch Scheduler" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#F3E5F5;strokeColor=#8E24AA;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="730" y="260" width="220" height="70" as="geometry"/>
        </mxCell>
        
        <!-- Finalizer Lambda -->
        <mxCell id="node_finalizer" value="Finalizer Lambda" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#E8EAF6;strokeColor=#303F9F;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="730" y="360" width="220" height="100" as="geometry"/>
        </mxCell>
        
        <!-- Finalizer Pseudocode -->
        <mxCell id="node_finalizer_note" value="Pseudocode:
• Query staging (MySQL/S3) for all alerts
• If all alerts 'completed':
  – Finalize job & update scheduling" style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFF2CC;strokeColor=#D6B656;fontSize=10;" vertex="1" parent="1">
          <mxGeometry x="730" y="470" width="220" height="80" as="geometry"/>
        </mxCell>
        
        <!-- Edges -->
        <!-- Edge: Airflow → ALB -->
        <mxCell id="edge_1" value="HTTP Trigger" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_airflow" target="node_alb">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: ALB → Coordinator Lambda -->
        <mxCell id="edge_2" value="Route Request" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_alb" target="node_coord">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Coordinator Lambda → MySQL DB (Staging) -->
        <mxCell id="edge_3" value="Store Alert Record" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_coord" target="node_mysql">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Coordinator Lambda → S3 Bucket (Staging) -->
        <mxCell id="edge_4" value="Stage JSON File (if large)" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_coord" target="node_s3">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Coordinator Lambda → SQS Queue -->
        <mxCell id="edge_5" value="Send SQS Message (pointer)" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_coord" target="node_sqs">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: SQS Queue → Worker Lambda -->
        <mxCell id="edge_6" value="Trigger Worker (Batch up to 100)" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_sqs" target="node_worker">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Worker Lambda → SFTP Server -->
        <mxCell id="edge_7" value="Upload JSON to SFTP" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_worker" target="node_sftp">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Worker Lambda → MySQL DB (update record) -->
        <mxCell id="edge_8" value="Update Status to 'completed'" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_worker" target="node_mysql">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: CloudWatch Scheduler → Finalizer Lambda -->
        <mxCell id="edge_9" value="Trigger Finalizer" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_cw" target="node_finalizer">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Finalizer Lambda → MySQL DB (Query) -->
        <mxCell id="edge_10" value="Query MySQL for Job Completion" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_finalizer" target="node_mysql">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
        
        <!-- Edge: Finalizer Lambda → S3 Bucket (Optional) -->
        <mxCell id="edge_11" value="Optional: Query S3 Staging" style="edgeStyle=orthogonalEdgeStyle;strokeColor=#000000;fontSize=10;" edge="1" parent="1" source="node_finalizer" target="node_s3">
          <mxGeometry relative="1" as="geometry"/>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>


---

Summary

1. Initiation:
 • Airflow/MWAA sends an HTTP trigger (via ALB) to the Coordinator Lambda.


2. Coordinator Lambda:
 • Fetches alerts from 20 statuses, aggregates them, and for each alert:
  – Stores the alert record in staging (either MySQL or S3).
  – Sends an SQS message (containing a pointer to the staged record).


3. SQS Queue:
 • Receives the SQS messages; its event source mapping is configured to deliver up to 100 messages per Worker invocation.


4. Worker Lambda:
 • Processes each SQS message in a batch by retrieving the staged alert (from MySQL or S3), uploading the JSON file to an SFTP server, and updating the alert’s status in MySQL to “completed.”


5. Finalization:
 • CloudWatch Scheduler automatically triggers the Finalizer Lambda, which queries MySQL (and optionally S3) to verify that all alerts are processed; if so, it finalizes the job (for example, updating scheduling details).



Staging Choice: S3 is recommended for large, high-volume files, while MySQL may suffice for moderate volumes if simplicity is desired.

This diagram—with clear spacing and professional styling—provides a clear view of the overall architecture and its components.

