Here’s a production-grade macOS shell script that:

Creates a scalable and maintainable Python project structure

Supports future growth (tests, certs, multiple Lambda handlers, logs)

Moves existing Python and config files from the given ROOT_DIR

Ensures directories are cleanly separated and named for clarity



---

✅ create_project_structure.sh

#!/bin/bash

# Usage: ./create_project_structure.sh /path/to/root_dir
ROOT_DIR=$1

if [[ -z "$ROOT_DIR" ]]; then
  echo "[ERROR] Please provide the root directory path as an argument."
  exit 1
fi

PROJECT_NAME="shield-alerts-hits-extractor"
PROJECT_ROOT="$ROOT_DIR/$PROJECT_NAME"

echo "[INFO] Creating project at: $PROJECT_ROOT"
mkdir -p "$PROJECT_ROOT/src/handlers"
mkdir -p "$PROJECT_ROOT/src/services"
mkdir -p "$PROJECT_ROOT/src/config"
mkdir -p "$PROJECT_ROOT/src/utils"
mkdir -p "$PROJECT_ROOT/src/certs"
mkdir -p "$PROJECT_ROOT/tests"
mkdir -p "$PROJECT_ROOT/maintenance"
touch    "$PROJECT_ROOT/requirements.txt"
touch    "$PROJECT_ROOT/README.md"
touch    "$PROJECT_ROOT/.gitignore"

# .gitignore template
cat <<EOF > "$PROJECT_ROOT/.gitignore"
__pycache__/
*.pyc
maintenance/
.env
EOF

# README placeholder
cat <<EOF > "$PROJECT_ROOT/README.md"
# Shield Alerts Hits Extractor

A structured, scalable AWS Lambda project for downloading alerts, polling status, and uploading to S3.

## Project Layout

- \`src/handlers\`: Lambda entry points
- \`src/services\`: Shield, SQS, S3 integrations
- \`src/config\`: Configuration logic and config file
- \`src/utils\`: Logging, validators
- \`src/certs\`: SSL certificates
- \`tests/\`: Unit tests
- \`maintenance/\`: Temp files (excluded from deploy)

## Getting Started

- Configure \`src/config/config.ini\`
- Set environment variables in Lambda console
- Deploy zipped \`src/\` folder

## Author

Generated by create_project_structure.sh
EOF

# Move existing files if they match expected names
declare -A FILE_MAP=(
  ["lambda_handler.py"]="src/handlers/lambda_handler.py"
  ["main.py"]="src/handlers/lambda_handler.py"
  ["alert_service.py"]="src/services/alert_service.py"
  ["sqs_client.py"]="src/services/sqs_client.py"
  ["s3_uploader.py"]="src/services/s3_uploader.py"
  ["logger.py"]="src/utils/logger.py"
  ["config_loader.py"]="src/config/config_loader.py"
  ["config.ini"]="src/config/config.ini"
  ["nsrootcacert.crt"]="src/certs/nsrootcacert.crt"
)

echo "[INFO] Relocating matching source files from: $ROOT_DIR"

for file in "${!FILE_MAP[@]}"; do
  found_path=$(find "$ROOT_DIR" -type f -name "$file" 2>/dev/null | head -n 1)
  if [[ -f "$found_path" ]]; then
    destination="$PROJECT_ROOT/${FILE_MAP[$file]}"
    echo "  - Moving $file to ${FILE_MAP[$file]}"
    mv "$found_path" "$destination"
  fi
done

echo "[INFO] Project structure created successfully!"
echo "[INFO] Navigate to $PROJECT_ROOT to begin development."


---

✅ How to Use

1. Save the script as create_project_structure.sh


2. Run it:

chmod +x create_project_structure.sh
./create_project_structure.sh /Users/yourname/Documents/projects



This script will create the structure under:

/Users/yourname/Documents/projects/shield-alerts-hits-extractor/

And move known files like alert_service.py, config_loader.py, etc. to their appropriate folders.


---

Would you like a version of this script that also:

Initializes a venv?

Installs boto3, requests, and pytest?

Generates a sample test?


Let me know and I’ll enhance it accordingly.

