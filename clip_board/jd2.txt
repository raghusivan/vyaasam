Excellent — here’s an enhanced and detailed version of your lambda_handler.py with full visibility into all steps when the Lambda is triggered by SQS:

Logs every step of processing

Explicitly shows when:

Lambda is triggered

SQS message is parsed

API is called

Status code is evaluated

Message is requeued


Useful for tracing flow in CloudWatch logs



---

✅ Final High-Debug lambda_handler.py

import json
import traceback
from alert_service import download_alert_data, start_alert_job
from sqs_client import send_job_to_sqs


def log_info(msg):
    print(f"[INFO] {msg}")


def log_success(msg):
    print(f"[SUCCESS] {msg}")


def log_warn(msg):
    print(f"[WARN] {msg}")


def log_error(msg):
    print(f"[ERROR] {msg}")


def lambda_handler(event, context):
    log_info("===== Lambda Triggered =====")
    log_info(f"Event Received:\n{json.dumps(event, indent=2)}")

    try:
        if 'Records' in event and event['Records'][0].get('eventSource') == 'aws:sqs':
            log_info("Source: AWS SQS")

            for record in event['Records']:
                job_id = record.get('body', 'UNKNOWN')
                log_info(f"---- Processing Job ID from SQS: {job_id} ----")

                try:
                    log_info(f"Step: Invoking Shield API to check job status for job_id: {job_id}")
                    completed = download_alert_data(job_id)

                    if completed:
                        log_success(f"Step: Job {job_id} completed. Data downloaded successfully.")
                    else:
                        log_warn(f"Step: Job {job_id} is not complete (likely 202 response). Requeuing...")

                        try:
                            response = send_job_to_sqs(job_id)
                            log_success(f"Requeued job {job_id} to SQS. MessageId: {response.get('MessageId')}")
                        except Exception as sqs_err:
                            log_error(f"Failed to requeue job {job_id} to SQS: {str(sqs_err)}")
                            traceback.print_exc()

                except Exception as api_err:
                    log_error(f"Error occurred while processing job_id {job_id}: {str(api_err)}")
                    traceback.print_exc()

        else:
            log_info("Source: Manual or non-SQS Event. Starting new job.")
            try:
                job_id = start_alert_job()
                log_success(f"New Shield job started. job_id: {job_id}")

                try:
                    response = send_job_to_sqs(job_id)
                    log_success(f"New job {job_id} added to SQS. MessageId: {response.get('MessageId')}")
                except Exception as sqs_err:
                    log_error(f"Error sending new job {job_id} to SQS: {str(sqs_err)}")
                    traceback.print_exc()

                return {
                    "statusCode": 200,
                    "body": json.dumps({"message": "Job started and sent to SQS", "jobId": job_id})
                }

            except Exception as job_start_err:
                log_error(f"Error while starting a new job: {str(job_start_err)}")
                traceback.print_exc()
                return {
                    "statusCode": 500,
                    "body": json.dumps({"message": "Failed to start job", "error": str(job_start_err)})
                }

    except Exception as unhandled_err:
        log_error(f"Unhandled error in Lambda: {str(unhandled_err)}")
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({"message": "Unhandled Lambda error", "error": str(unhandled_err)})
        }

    log_info("===== Lambda Execution Finished =====")


---

Next Step:

Would you like me to:

Integrate this with the updated alert_service.py and sqs_client.py

Bundle everything into a zip package (including config.ini) for upload to Lambda?


Let me know — I can prepare it for immediate deployment.

