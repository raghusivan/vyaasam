Here’s a hardened, self-contained Bash script that:

1. Validates its environment (checks for curl & jq)


2. Uses strict mode (set -euo pipefail) to catch errors early


3. Hard-codes your comma-separated index list


4. Safely substitutes {{message_id}} into your JSON template


5. Iterates through each index, issuing a filtered ES query that only returns _source (no shards or totals)


6. Stops on the first index with ≥1 hit and writes out only the matching documents’ _source




---

#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

#— Config --------------------------------------------------------------------
ES_URL="https://master.uat.digitalreasoningelasticsearch.forriskdigitalreasoning.syd.non.c1.macquarie.com:9200"
ES_USERNAME="rmg_dp_elastic_au_ua"
ES_PASSWORD="qMNrip_HJKLbzz!!"

# Comma-separated indices to try, in order:
INDEX_NAMES="index_one,index_two,ecomm_production_20200929__message_types_alerts_2025,ecomm_production_20200929__message_types_alerts_2024"

# Your JSON template with {{message_id}} placeholder:
TEMPLATE_FILE="statusExact.json"

#— Helpers & sanity checks --------------------------------------------------
command -v curl >/dev/null 2>&1 || { echo >&2 "ERROR: curl is required"; exit 1; }
command -v jq   >/dev/null 2>&1 || { echo >&2 "ERROR: jq is required";   exit 1; }

if [ ! -f "$TEMPLATE_FILE" ]; then
  echo "ERROR: template file '$TEMPLATE_FILE' not found"
  exit 1
fi

#— Get message_id ------------------------------------------------------------
if [ $# -ne 1 ]; then
  echo "Usage: $0 <message_id>"
  exit 1
fi
MESSAGE_ID="$1"
if [[ -z "$MESSAGE_ID" ]]; then
  echo "ERROR: message_id must be non-empty"
  exit 1
fi

#— Prepare temporary query file ----------------------------------------------
QUERY_FILE="$(mktemp)"
trap 'rm -f "$QUERY_FILE"' EXIT

# Substitute placeholder safely
sed "s,{{message_id}},${MESSAGE_ID},g" "$TEMPLATE_FILE" > "$QUERY_FILE"

#— Iterate indices & query ES ------------------------------------------------
IFS=',' read -r -a INDICES <<< "$INDEX_NAMES"
for IDX in "${INDICES[@]}"; do
  echo "→ Querying index: $IDX"
  # filter_path limits response to only the hits._source array
  RESP=$(curl --fail -s \
    -u "${ES_USERNAME}:${ES_PASSWORD}" \
    -H 'Content-Type: application/json' \
    -X POST "${ES_URL}/${IDX}/_search?filter_path=hits.hits._source" \
    --data-binary "@${QUERY_FILE}")

  # Extract array of sources; count length
  SRC_COUNT=$(jq '(.hits.hits | length)' <<<"$RESP")
  if (( SRC_COUNT > 0 )); then
    OUT_FILE="found_${IDX//\//_}_${MESSAGE_ID}.json"
    echo "✔ Found $SRC_COUNT documents in '$IDX', writing only _source to $OUT_FILE"
    # write just the source objects as a JSON array
    jq '[.hits.hits[]._source]' <<<"$RESP" > "$OUT_FILE"
    exit 0
  fi
done

echo "✖ No documents found in any of: ${INDICES[*]} for message_id='$MESSAGE_ID'"
exit 1


---

Usage

1. Place this script next to your statusExact.json


2. Make executable:

chmod +x search_message_id.sh


3. Run with the ID you want to look up:

./search_message_id.sh AZSNpM9TjdrZW-iTCoQJ



The moment it finds a hit in any index, it will save a file named like

found_ecomm_production_20200929__message_types_alerts_2025_AZSNpM9TjdrZW-iTCoQJ.json

containing only the _source objects (i.e. your documents) as a clean JSON array.

