Below is one way to refactor the code so that the logic for creating date‐based folders and writing files is separated into its own module. In this example, we create a new file (e.g. file_manager.py) that contains a helper class (FileManager) to handle folder creation and file writing. Then the ResponseProcessor class uses that helper to perform file operations.


---

file_manager.py

import os
import json
from datetime import datetime

class FileManager:
    def __init__(self, output_dir="output"):
        self.output_dir = output_dir

    def get_date_folder(self, timestamp: datetime) -> str:
        """
        Given a timestamp, compute the folder path (output/year/month),
        create it if it doesn't exist, and return the folder path.
        """
        year_str = timestamp.strftime("%Y")
        month_str = timestamp.strftime("%m")
        date_folder = os.path.join(self.output_dir, year_str, month_str)
        os.makedirs(date_folder, exist_ok=True)
        return date_folder

    def write_individual_file(self, message: dict, timestamp: datetime, index: int) -> str:
        """
        Write a single JSON message to a uniquely named file under the
        date-based folder. Returns the full path of the written file.
        """
        date_folder = self.get_date_folder(timestamp)
        file_name = f"message_{timestamp.strftime('%Y%m%d_%H%M%S_%f')}_{index}.json"
        full_path = os.path.join(date_folder, file_name)
        with open(full_path, 'w') as file:
            json.dump(message, file, indent=2)
        return full_path

    def append_to_combined_file(self, messages: list, timestamp: datetime, output_file: str) -> str:
        """
        Append a list of messages to a combined JSON file in the date-based folder.
        If the file doesn't exist, it is created. Returns the full path to the file.
        """
        date_folder = self.get_date_folder(timestamp)
        combined_path = os.path.join(date_folder, output_file)

        # Attempt to read any existing data; if not present, start with an empty list
        try:
            with open(combined_path, 'r') as file:
                data = json.load(file)
        except FileNotFoundError:
            data = []

        data.extend(messages)

        # Write the updated list of messages back to the file
        with open(combined_path, 'w') as file:
            json.dump(data, file, indent=2)

        return combined_path


---

processor.py

from datetime import datetime
import json
from file_manager import FileManager

class ResponseProcessor:
    def __init__(self, output_file, individual_json=False, output_dir="output"):
        self.output_file = output_file
        self.individual_json = individual_json
        self.file_manager = FileManager(output_dir)
        # Set up logger, etc. as needed

    def process_and_save_messages(self, response: dict) -> int:
        """
        Process the response and save messages to files.
        """
        if 'messages' in response and isinstance(response['messages'], list):
            filtered = self._filter_messages(response['messages'])
            self._append_to_output_file(filtered)
            # self.logger.info(f"Processed and saved {len(filtered)} messages.")
            return len(filtered)
        else:
            # self.logger.warning("No messages found in the response.")
            return 0

    def _filter_messages(self, messages: list) -> list:
        # Placeholder for your filtering logic
        return messages

    def _append_to_output_file(self, messages: list):
        """
        Depending on the configuration, either write each message
        to an individual file or append all messages to a combined file.
        """
        timestamp = datetime.now()

        if self.individual_json:
            # Write each message as an individual JSON file
            for i, message in enumerate(messages):
                file_path = self.file_manager.write_individual_file(message, timestamp, i)
                # self.logger.debug(f"Saved message to {file_path}")
        else:
            # Append messages to a single combined JSON file
            if messages:
                file_path = self.file_manager.append_to_combined_file(messages, timestamp, self.output_file)
                # self.logger.debug(f"Appended {len(messages)} messages to {file_path}")


---

Explanation

1. file_manager.py Module

get_date_folder Method: Computes the year/month folder path based on a provided timestamp, creates the directory structure (using os.makedirs(..., exist_ok=True)), and returns the folder path.

write_individual_file Method: Uses the above method to get the correct folder, then constructs a unique filename (with a timestamp and index) and writes the individual JSON message to that file.

append_to_combined_file Method: Also gets the date folder, constructs the combined file path, attempts to load any existing messages from the file, appends the new messages, and then writes the updated list back to disk.



2. processor.py Module

The ResponseProcessor class now focuses on processing messages. It delegates file operations to the FileManager instance.

In the _append_to_output_file method, a timestamp is generated once, and then based on whether the output should be individual JSON files or a combined file, the appropriate method of FileManager is called.




This separation keeps your file system logic encapsulated within its own module, making the code easier to maintain, test, and reuse.

