Hereâ€™s a clean and well-structured rewrite of your script that:

Recursively scans .py files under a hardcoded ./src directory.

Extracts all actual imports (import and from ... import ...).

Filters out standard library and AWS Lambda default libraries.

Outputs a requirements.txt file listing only needed third-party dependencies (no duplicates).


import os
import ast
import sys

# Set the root directory for your source files
ROOT_DIR = "./src"

# Built-in and Lambda-included modules to exclude
AWS_LAMBDA_BUILTINS = {
    'boto3', 'botocore', 's3transfer', 'dateutil', 'six', 'jmespath',
    'urllib3', 'awslambdaric', 'setuptools', 'pip', 'pkg_resources'
}

# Standard library modules (Python 3.11+)
try:
    STANDARD_LIBS = set(sys.stdlib_module_names)
except AttributeError:
    # Fallback for older versions
    import sysconfig
    from distutils.sysconfig import get_python_lib
    STANDARD_LIBS = set(name for name in os.listdir(sysconfig.get_paths()["stdlib"]))

# Mapping some modules to actual PyPI package names
MODULE_TO_PACKAGE = {
    'yaml': 'PyYAML',
    'cv2': 'opencv-python',
    'PIL': 'Pillow',
    'bs4': 'beautifulsoup4',
    'sklearn': 'scikit-learn'
}

# Gather all imports found
found_imports = set()

# Get all local package/module names to ignore
local_modules = set()
for root, _, files in os.walk(ROOT_DIR):
    if '__init__.py' in files:
        package = os.path.relpath(root, ROOT_DIR).split(os.sep)[0]
        local_modules.add(package)
for f in os.listdir(ROOT_DIR):
    if f.endswith(".py"):
        local_modules.add(f.replace(".py", ""))

def extract_imports_from_file(filepath):
    with open(filepath, "r", encoding="utf-8") as file:
        try:
            tree = ast.parse(file.read(), filename=filepath)
        except SyntaxError:
            return
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                found_imports.add(alias.name.split('.')[0])
        elif isinstance(node, ast.ImportFrom) and node.module:
            if node.level == 0:  # skip relative imports
                found_imports.add(node.module.split('.')[0])

# Recursively process .py files
for root, _, files in os.walk(ROOT_DIR):
    for file in files:
        if file.endswith(".py"):
            extract_imports_from_file(os.path.join(root, file))

# Final dependencies after removing stdlib, lambda built-ins, and local code
dependencies = set()
for module in found_imports:
    if module in STANDARD_LIBS or module in AWS_LAMBDA_BUILTINS or module in local_modules:
        continue
    package = MODULE_TO_PACKAGE.get(module, module)
    dependencies.add(package)

# Write to requirements.txt
with open("requirements.txt", "w") as req:
    for pkg in sorted(dependencies):
        req.write(pkg + "\n")

print("requirements.txt generated with the following packages:")
print("\n".join(sorted(dependencies)))

This version improves:

Readability and modularity

Uses ast parsing robustly

Excludes relative imports and local modules properly

Maps known aliases to PyPI package names


Let me know if you want to include version pinning (e.g. requests==2.31.0).

