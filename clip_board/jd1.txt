Below is a fully instrumented and debug-friendly rewrite of your lambda_handler.py. It includes:

Clear, color-coded log levels

Contextual messages for each step

Prints full details of SQS responses, API results, and any errors

Easy to trace in CloudWatch



---

lambda_handler.py (High-Detail Logging Version)

import json
import traceback
from alert_service import start_alert_job, download_alert_data
from sqs_client import send_job_to_sqs


def log_info(msg):
    print(f"[INFO] {msg}")


def log_success(msg):
    print(f"[SUCCESS] {msg}")


def log_warn(msg):
    print(f"[WARN] {msg}")


def log_error(msg):
    print(f"[ERROR] {msg}")


def lambda_handler(event, context):
    log_info("====== Lambda Invocation Started ======")
    log_info(f"Raw Event Received: {json.dumps(event)}")

    try:
        # If invoked by SQS
        if 'Records' in event and event['Records'][0].get('eventSource') == 'aws:sqs':
            log_info("Invocation Type: SQS Trigger")

            for record in event['Records']:
                job_id = record.get('body', 'UNKNOWN')
                log_info(f"Processing SQS message: job_id = {job_id}")

                try:
                    completed = download_alert_data(job_id)

                    if not completed:
                        log_warn(f"Job {job_id} is not yet complete (status 202). Requeuing...")

                        try:
                            response = send_job_to_sqs(job_id)
                            log_info(f"Requeued job {job_id} successfully. SQS response: {json.dumps(response)}")
                        except Exception as sqs_err:
                            log_error(f"Failed to requeue job {job_id}: {str(sqs_err)}")
                            traceback.print_exc()
                    else:
                        log_success(f"Job {job_id} is complete. Data downloaded.")
                except Exception as process_err:
                    log_error(f"Exception during job {job_id} processing: {str(process_err)}")
                    traceback.print_exc()

        else:
            # Manual or test event
            log_info("Invocation Type: Manual or API Gateway")

            try:
                job_id = start_alert_job()
                log_success(f"Started new alert job. job_id = {job_id}")

                try:
                    response = send_job_to_sqs(job_id)
                    log_info(f"Sent job {job_id} to SQS for processing. SQS response: {json.dumps(response)}")
                except Exception as sqs_err:
                    log_error(f"Failed to send new job {job_id} to SQS: {str(sqs_err)}")
                    traceback.print_exc()

                return {
                    "statusCode": 200,
                    "body": json.dumps({"message": "Job started and sent to SQS", "jobId": job_id})
                }

            except Exception as start_err:
                log_error(f"Error starting new job: {str(start_err)}")
                traceback.print_exc()
                return {
                    "statusCode": 500,
                    "body": json.dumps({"message": "Job start failed", "error": str(start_err)})
                }

    except Exception as fatal_err:
        log_error(f"Unhandled fatal exception in Lambda: {str(fatal_err)}")
        traceback.print_exc()
        return {
            "statusCode": 500,
            "body": json.dumps({"message": "Fatal error occurred", "error": str(fatal_err)})
        }

    log_info("====== Lambda Invocation Finished ======")


---

Suggested Logging Improvements in Other Modules

sqs_client.py:

def send_job_to_sqs(job_id, delay_seconds=120):
    print(f"[INFO] Attempting to send job_id '{job_id}' to SQS with delay {delay_seconds}s...")
    response = sqs.send_message(
        QueueUrl=QUEUE_URL,
        MessageBody=job_id,
        DelaySeconds=delay_seconds
    )
    print(f"[SUCCESS] Message sent to SQS. MessageId: {response.get('MessageId')}")
    return response

alert_service.py:

def download_alert_data(job_id):
    print(f"[INFO] Checking job status for job_id: {job_id}")
    response = check_job_status(job_id)

    print(f"[INFO] Status Code: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        with open("response.json", "w") as f:
            json.dump(data, f)
        print(f"[SUCCESS] Job {job_id} completed. Data saved to response.json")
        return True
    elif response.status_code == 202:
        print(f"[WARN] Job {job_id} still in progress (202). Will retry later.")
        return False
    else:
        print(f"[ERROR] Unexpected response for job {job_id}: {response.status_code}")
        return False


---

This version will ensure:

Every action is logged

Any failure in start_alert_job, download_alert_data, or send_job_to_sqs shows clearly

You’ll know if SQS re-queueing failed, and you’ll see all message content


Would you like me to bundle this full working structure as a zip to deploy to Lambda?








