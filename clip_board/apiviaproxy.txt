To route the Shield API calls through the proxy shown in your image, you can update your requests calls by passing the proxies parameter.

Here's how to update your alert_service.py file to use proxy settings, loading them either from the environment or from config.ini.


---

✅ 1. config.ini (Add this section)

[proxy]
http_proxy = http://privproxy.prod-v2.proxy.core.syd.non.c1.macquarie.com:2128
https_proxy = http://privproxy.prod-v2.proxy.core.syd.non.c1.macquarie.com:2128


---

✅ 2. config_loader.py (Add proxy variables)

# Proxy settings
HTTP_PROXY = config['proxy']['http_proxy']
HTTPS_PROXY = config['proxy']['https_proxy']

PROXIES = {
    "http": HTTP_PROXY,
    "https": HTTPS_PROXY
}


---

✅ 3. Updated alert_service.py with proxy support

import json
import requests
from config_loader import ACCESS_TOKEN, BASE_URL, CERT_PATH, START_DATE, END_DATE, PROXIES


def start_alert_job():
    url = f"{BASE_URL}/data-extract/v1/alerts"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "startDate": START_DATE,
        "endDate": END_DATE
    }

    print(f"[INFO] Starting alert job via POST {url}")
    response = requests.post(url, headers=headers, json=payload, verify=CERT_PATH, proxies=PROXIES)
    print(f"[INFO] Status Code: {response.status_code}")
    response.raise_for_status()

    job_id = response.json().get("jobId")
    print(f"[SUCCESS] Started job_id: {job_id}")
    return job_id


def check_job_status(job_id):
    url = f"{BASE_URL}/data-extract/v1/alerts/{job_id}"
    headers = {"Authorization": f"Bearer {ACCESS_TOKEN}"}
    print(f"[INFO] Checking job status via GET {url}")
    return requests.get(url, headers=headers, verify=CERT_PATH, proxies=PROXIES)


def download_alert_data(job_id):
    print(f"[INFO] Downloading alert data for job_id: {job_id}")
    response = check_job_status(job_id)

    print(f"[INFO] Status Code: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        with open("response.json", "w") as f:
            json.dump(data, f)
        print(f"[SUCCESS] Job {job_id} completed. Data saved to response.json")
        return True
    elif response.status_code == 202:
        print(f"[WARN] Job {job_id} still in progress (202). Re-queueing required.")
        return False
    else:
        print(f"[ERROR] Unexpected response for job {job_id}: {response.status_code}")
        return False


---

This ensures all outbound HTTP/HTTPS traffic for the API is routed through the required Macquarie proxy.

Would you like me to zip and share the updated full directory (config.ini, alert_service.py, lambda_handler.py, etc.) ready for Lambda deployment?

