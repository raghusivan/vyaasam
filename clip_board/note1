

import sqlite3
import tkinter as tk
from tkinter import messagebox, filedialog

class NoteManager:
    def __init__(self, db_name="notes.db"):
        try:
            self.conn = sqlite3.connect(db_name)
            self.create_table()
        except sqlite3.Error as e:
            raise Exception(f"Error connecting to the database: {e}")

    def create_table(self):
        try:
            with self.conn:
                self.conn.execute(
                    "CREATE TABLE IF NOT EXISTS notes (id INTEGER PRIMARY KEY AUTOINCREMENT, content TEXT NOT NULL)"
                )
        except sqlite3.Error as e:
            raise Exception(f"Error creating the table: {e}")

    def add_note(self, note):
        try:
            with self.conn:
                self.conn.execute("INSERT INTO notes (content) VALUES (?)", (note,))
            return "Note added!"
        except sqlite3.Error as e:
            raise Exception(f"Database error: {e}")

class NoteApp:
    def __init__(self, root):
        self.manager = NoteManager()
        self.root = root
        self.root.title("Note Manager")

        # UI Elements
        self.text_area = tk.Text(root, height=15, width=50)
        self.text_area.pack(pady=10)

        self.entry = tk.Entry(root, width=50)
        self.entry.pack(pady=5)

        self.add_button = tk.Button(root, text="Add Note", command=self.add_note)
        self.add_button.pack(pady=5)

        self.delete_button = tk.Button(root, text="Delete Note", command=self.delete_note)
        self.delete_button.pack(pady=5)

        self.search_button = tk.Button(root, text="Search Notes", command=self.search_notes)
        self.search_button.pack(pady=5)

        self.load_button = tk.Button(root, text="Load Notes from File", command=self.load_notes_from_file)
        self.load_button.pack(pady=5)

        self.list_button = tk.Button(root, text="List Notes", command=self.list_notes)
        self.list_button.pack(pady=5)

    def add_note(self):
        note = self.entry.get().strip()
        if not note:
            messagebox.showwarning("Warning", "Note content cannot be empty!")
            return

        try:
            message = self.manager.add_note(note)
            messagebox.showinfo("Info", message)
            self.entry.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save note: {str(e)}")

    def delete_note(self):
        note_id = self.entry.get().strip()
        if note_id.isdigit():
            try:
                message = self.manager.delete_note_by_id(int(note_id))
                messagebox.showinfo("Info", message)
                self.entry.delete(0, tk.END)
            except Exception as e:
                messagebox.showerror("Error", f"Failed to delete note: {str(e)}")
        else:
            messagebox.showwarning("Warning", "Please enter a valid note ID!")

    def search_notes(self):
        query = self.entry.get().strip()
        try:
            results = self.manager.search_notes(query)
            self.text_area.delete(1.0, tk.END)
            if results:
                for idx, (note_id, note) in enumerate(results, start=1):
                    self.text_area.insert(tk.END, f"Result {idx} (ID: {note_id}): {note}\n")
            else:
                self.text_area.insert(tk.END, "No matching notes found!")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to search notes: {str(e)}")

    def load_notes_from_file(self):
        filename = filedialog.askopenfilename()
        if filename:
            try:
                message = self.manager.load_notes_from_file(filename)
                messagebox.showinfo("Info", message)
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load notes: {str(e)}")

    def list_notes(self):
        try:
            notes = self.manager.list_notes()
            self.text_area.delete(1.0, tk.END)
            for idx, (note_id, note) in enumerate(notes, start=1):
                self.text_area.insert(tk.END, f"Note {idx} (ID: {note_id}): {note}\n")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to list notes: {str(e)}")

def main():
    root = tk.Tk()
    app = NoteApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()


