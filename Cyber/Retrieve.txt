Creating a Python AWS Lambda Function to Retrieve a Password from CyberArk Vault

To adapt the Python script for execution in AWS Lambda, we need to consider the constraints and best practices of the AWS Lambda environment, especially regarding secure handling of certificates and keys.


---

Challenges and Considerations

1. File System Access:

AWS Lambda has a read-only file system except for the /tmp directory.

We need to include certificates and keys within the deployment package or fetch them securely at runtime.



2. Dependencies:

External libraries like requests need to be included in the deployment package or added via Lambda Layers.



3. Security:

Certificates and keys should not be hard-coded or stored in plaintext within the code or deployment package.

Use AWS services like AWS Secrets Manager or AWS Systems Manager Parameter Store to securely store and retrieve sensitive data.



4. Environment Variables:

Use environment variables for configuration parameters, possibly encrypted with AWS KMS.





---

Solution Overview

1. Store Certificates and Keys Securely:

Use AWS Secrets Manager to store certificates and keys securely.

Retrieve them at runtime using the AWS SDK.



2. Use Environment Variables:

Store non-sensitive configuration parameters in environment variables.



3. Include Dependencies:

Use a Lambda Layer to include external libraries like requests or package them within the deployment package.



4. Write the Lambda Function:

The function will retrieve the certificates and keys from AWS Secrets Manager.

Make the API request to CyberArk using the requests library.





---

Step-by-Step Guide

1. Store Certificates and Keys in AWS Secrets Manager

Certificates and Keys:

client_cert.pem

client_key.key

ca_bundle.crt


Procedure:

Go to AWS Secrets Manager in the AWS Console.

Create a new secret for each file or combine them into a single secret.

For each secret, paste the content of the certificate or key.

Note down the ARN of each secret.



2. Create the Lambda Function

Create a New Lambda Function:

Runtime: Python 3.8+

Handler: lambda_function.lambda_handler


Set Up IAM Role:

Ensure the Lambda's execution role has permissions to access the secrets in AWS Secrets Manager.

Attach the AWSSecretsManagerReadWrite policy or create a custom policy with read access to the specific secrets.



3. Set Environment Variables

Environment Variables:

Note:

Adjust the values based on your actual configuration.

Ensure that sensitive data is stored securely; for example, consider using AWS KMS to encrypt environment variables if necessary.



4. Update the Lambda Function Code

Below is the Lambda function code that retrieves the certificates and keys from AWS Secrets Manager and makes the API call to CyberArk.

import os
import boto3
import base64
import json
import requests
from botocore.exceptions import ClientError

# Initialize AWS Secrets Manager client
secrets_client = boto3.client('secretsmanager')

def get_secret(secret_arn):
    try:
        response = secrets_client.get_secret_value(SecretId=secret_arn)
        if 'SecretString' in response:
            secret = response['SecretString']
        else:
            # If the secret is binary
            secret = base64.b64decode(response['SecretBinary'])
        return secret
    except ClientError as e:
        print(f"Error retrieving secret {secret_arn}: {e}")
        raise e

def lambda_handler(event, context):
    # Environment variables
    url = os.environ.get('CYBERARK_URL')
    params = {
        'AppId': os.environ.get('APP_ID'),
        'Safe': os.environ.get('SAFE'),
        'UserName': os.environ.get('USERNAME'),
        'Address': os.environ.get('ADDRESS')
    }
    client_cert_arn = os.environ.get('CLIENT_CERT_ARN')
    client_key_arn = os.environ.get('CLIENT_KEY_ARN')
    ca_bundle_arn = os.environ.get('CA_BUNDLE_ARN')

    # Retrieve certificates and keys from AWS Secrets Manager
    client_cert = get_secret(client_cert_arn)
    client_key = get_secret(client_key_arn)
    ca_bundle = get_secret(ca_bundle_arn)

    # Write certificates and keys to /tmp directory
    client_cert_path = '/tmp/client_cert.pem'
    client_key_path = '/tmp/client_key.key'
    ca_bundle_path = '/tmp/ca_bundle.crt'

    try:
        with open(client_cert_path, 'w') as cert_file:
            cert_file.write(client_cert)
        with open(client_key_path, 'w') as key_file:
            key_file.write(client_key)
        with open(ca_bundle_path, 'w') as ca_file:
            ca_file.write(ca_bundle)
    except Exception as e:
        print(f"Error writing certificates to /tmp: {e}")
        raise e

    # Make the API request to CyberArk
    try:
        response = requests.get(
            url,
            params=params,
            cert=(client_cert_path, client_key_path),
            verify=ca_bundle_path,
            timeout=10
        )

        response.raise_for_status()
        data = response.json()

        # Extract the password (adjust based on the actual response structure)
        password = data.get('Content')

        if password:
            # Handle the password securely
            print("Password retrieved successfully.")
            # Use the password as needed within your application
            # For this example, we'll return it (Not recommended for real use)
            return {
                'statusCode': 200,
                'body': json.dumps({'password': password})
            }
        else:
            print("Password not found in the response.")
            return {
                'statusCode': 404,
                'body': json.dumps({'error': 'Password not found'})
            }

    except requests.exceptions.RequestException as e:
        print(f"An error occurred while retrieving the password: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


---

5. Package Dependencies

Option 1: Include Dependencies in Deployment Package

Create a Deployment Package:

Since requests is not part of the AWS Lambda base environment, you need to include it.

Create a deployment package (ZIP file) that includes your Lambda function code and the requests library.


Procedure:

mkdir lambda_function
cd lambda_function

# Copy your lambda_function.py into this directory
# Save the code above as lambda_function.py

# Install requests library into the directory
pip install requests -t .

# Create the deployment package
zip -r ../lambda_function.zip .

Upload the Deployment Package:

Go to your Lambda function in the AWS Console.

Upload the lambda_function.zip file.



Option 2: Use Lambda Layers

Create a Lambda Layer for requests Library:

This method allows you to separate the dependencies from your function code.


Procedure:

1. Create Layer Package:

mkdir python
pip install requests -t python/
zip -r requests_layer.zip python


2. Create Lambda Layer:

Go to AWS Lambda Layers in the AWS Console.

Create a new layer named requests-layer.

Upload requests_layer.zip.

Select the appropriate runtime (e.g., Python 3.8).



3. Attach Layer to Lambda Function:

In your Lambda function configuration, add the requests-layer.






---

6. Adjust IAM Permissions

Ensure that the Lambda execution role has permissions to:

Access AWS Secrets Manager:

Add secretsmanager:GetSecretValue permission for the secrets used.


Write to /tmp Directory:

AWS Lambda functions have permissions to write to /tmp by default.





---

7. Testing the Lambda Function

Test Event:

Create a test event in the AWS Lambda console (the event data is not used in this function, so it can be empty or a simple JSON object).


Invoke the Function:

Run the test and check the logs for any errors.

Ensure that the function can retrieve the certificates and keys from AWS Secrets Manager.

Check that the function can make the API call to CyberArk and handle the response correctly.




---

Security Considerations

Do Not Return Sensitive Data:

In the example code, the password is returned in the response for demonstration purposes. This is not recommended for production. Instead, handle the password securely within the Lambda function.


Encrypt Environment Variables:

For sensitive environment variables, use AWS KMS to encrypt them.


Secure Access to Secrets:

Limit the IAM role permissions to only the necessary secrets.

Enable rotation of secrets if applicable.




---

Example Adjustments for Response Handling

Adjusting the Response Parsing:

The password = data.get('Content') line assumes that the password is under the Content key in the JSON response.

Adjust this based on the actual structure of the response from the CyberArk API.


Logging:

Use the logging module instead of print statements for better log management.


import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Replace print statements with logger
logger.info("Password retrieved successfully.")



---

Conclusion

By adapting the Python script for AWS Lambda, we've created a serverless function that securely retrieves a password from a CyberArk vault. The function leverages AWS Secrets Manager to securely store and access sensitive certificates and keys, follows best practices for environment configuration, and handles dependencies appropriately.


---

Final Notes

Error Handling:

Implement robust error handling to cover scenarios such as missing environment variables, inability to access secrets, or network issues.


Monitoring and Logging:

Utilize AWS CloudWatch Logs to monitor the Lambda function's execution and troubleshoot issues.


Performance Optimization:

Remember that writing to and reading from the /tmp directory counts against the execution time of your Lambda function.

If performance is critical, consider optimizing how the certificates are handled.


Security Auditing:

Regularly audit your IAM roles and policies to ensure that they adhere to the principle of least privilege.




---

Let me know if you need further assistance or any modifications!

======

          Rewriting the Process with a Meaningful Folder Structure and Best Practices

To securely and efficiently retrieve a password from a CyberArk vault using a Python script, we'll reorganize the folder structure to be more meaningful and adhere to best practices. We'll also enhance the Python script to use the requests library instead of invoking curl through subprocess, which is more Pythonic and secure.


---

Step 1: Set Up a Secure and Meaningful Folder Structure

We'll create a dedicated directory for our application under /opt, which is a standard location for optional or third-party software on Unix-like systems.

Folder Structure:

/opt/cyberark_client/
├── certs/
│   ├── client_cert.pem
│   ├── client_key.key
│   └── ca_bundle.crt
└── scripts/
    └── retrieve_password.py

Explanation:

/opt/cyberark_client/: Base directory for the CyberArk client application.

certs/: Stores all certificate-related files.

client_cert.pem: The client certificate provided by CyberArk.

client_key.key: The private key associated with the client certificate.

ca_bundle.crt: The CA bundle file for SSL verification.


scripts/: Contains the Python script to retrieve the password.


Best Practices:

Security: Storing certificates and keys in a secure directory with restricted permissions (chmod 600 for files, chmod 700 for directories) ensures that only authorized users can access them.

Organization: Separating certificates and scripts into different directories improves maintainability and clarity.



---

Step 2: Write the Python Script Using Best Practices

We'll write a Python script that uses the requests library to securely communicate with the CyberArk API.

Python Script (retrieve_password.py):

import os
import requests

# Define the folder paths
BASE_PATH = '/opt/cyberark_client'
CERTS_PATH = os.path.join(BASE_PATH, 'certs')

# Define certificate and key file paths
CLIENT_CERT = os.path.join(CERTS_PATH, 'client_cert.pem')
CLIENT_KEY = os.path.join(CERTS_PATH, 'client_key.key')
CA_BUNDLE = os.path.join(CERTS_PATH, 'ca_bundle.crt')

# URL and parameters to fetch the password (modify as needed)
URL = "https://cyberark-ccp.lb.macbank/AIMWebService/api/Accounts"
PARAMS = {
    'AppId': 'AP012815-PRD',
    'Safe': 'CP-AP012815-SYS-PRD-INT',
    'UserName': 'rmg_commsurv_email',
    'Address': 'NTADMIN'
}

def retrieve_password():
    try:
        # Make the GET request with client certificate and key
        response = requests.get(
            URL,
            params=PARAMS,
            cert=(CLIENT_CERT, CLIENT_KEY),
            verify=CA_BUNDLE,
            timeout=10  # Timeout after 10 seconds
        )

        # Raise an exception for HTTP error codes
        response.raise_for_status()

        # Parse the JSON response
        data = response.json()

        # Extract the password (adjust the key based on actual response structure)
        password = data.get('Content')

        if password:
            # Handle the password securely
            print("Password retrieved successfully.")
            # Use the password as needed within your application
            return password
        else:
            print("Password not found in the response.")
            return None

    except requests.exceptions.RequestException as e:
        print(f"An error occurred while retrieving the password: {str(e)}")
        return None

if __name__ == "__main__":
    retrieve_password()

Explanation:

1. Imports and Constants:

requests: Used for making HTTP requests.

os: Helps in constructing file paths.

Constants: Defined in uppercase for clarity (BASE_PATH, CERTS_PATH, etc.).



2. Certificate Handling:

cert Parameter: Specifies the client certificate and key for authentication.

verify Parameter: Uses the CA bundle to verify the server's SSL certificate.



3. HTTP Request:

requests.get(): Performs an HTTP GET request to the CyberArk API.

params: Sends query parameters in the URL.

timeout: Prevents the request from hanging indefinitely.



4. Error Handling:

response.raise_for_status(): Raises an exception for HTTP error responses (4xx or 5xx).

try-except Block: Catches exceptions related to the request and handles them gracefully.



5. Password Extraction:

data.get('Content'): Extracts the password from the JSON response. Adjust the key based on the actual response structure.



6. Security Considerations:

Do Not Print Password: The script does not print the password to stdout to prevent accidental exposure.

Secure Handling: The password should be used securely within your application logic.





---

Additional Best Practices

1. File Permissions:

Certificates and Keys: Set permissions to 600 (chmod 600) so that only the owner can read and write.

Directories: Set permissions to 700 (chmod 700) to restrict access.



2. Environment Variables:

Sensitive Data: Consider using environment variables or a configuration file for sensitive data like AppId, Safe, UserName, and Address.

import os

PARAMS = {
    'AppId': os.environ.get('CYBERARK_APP_ID'),
    'Safe': os.environ.get('CYBERARK_SAFE'),
    'UserName': os.environ.get('CYBERARK_USERNAME'),
    'Address': os.environ.get('CYBERARK_ADDRESS')
}



3. Logging:

Use Logging Module: Replace print statements with Python's logging module for better control over log levels and destinations.

import logging

logging.basicConfig(level=logging.INFO)
logging.info("Password retrieved successfully.")



4. Exception Specificity:

Catch Specific Exceptions: Handle different types of exceptions separately to provide more detailed error messages.

except requests.exceptions.HTTPError as e:
    logging.error(f"HTTP error occurred: {e}")
except requests.exceptions.ConnectionError as e:
    logging.error(f"Connection error occurred: {e}")
except requests.exceptions.Timeout as e:
    logging.error(f"Timeout error occurred: {e}")
except requests.exceptions.RequestException as e:
    logging.error(f"An error occurred: {e}")



5. Virtual Environment:

Isolate Dependencies: Use a virtual environment (venv, virtualenv, or conda) to manage Python packages.

python3 -m venv /opt/cyberark_client/venv
source /opt/cyberark_client/venv/bin/activate
pip install requests



6. Shebang and Execution Permissions:

Make Script Executable: Add a shebang line (#!/usr/bin/env python3) at the top of the script and set execution permissions (chmod +x retrieve_password.py).

#!/usr/bin/env python3





---

Final Thoughts

By reorganizing the folder structure and enhancing the Python script, we've improved the security, maintainability, and readability of the code. The use of the requests library aligns with Python best practices and eliminates the need to invoke external commands via subprocess.

Remember to:

Adjust the URL, parameters, and JSON parsing based on your actual API and response format.

Securely handle the retrieved password within your application.

Regularly update and patch your dependencies to mitigate security vulnerabilities.


Let me know if you need further assistance or modifications!

                                     
