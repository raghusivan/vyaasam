  I'll help modify the script to use the email addresses shown in your configuration file. Here's the updated version:

```python
import os
import sys
import smtplib
import logging
import configparser
import requests
from email import message_from_file
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import Optional
from pathlib import Path

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('email_sender.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class EmailSender:
    def __init__(self, config_path: str = 'config.ini'):
        """Initialize EmailSender with configuration"""
        self.config = self._load_config(config_path)
        self.smtp_password = None

    def _load_config(self, config_path: str) -> configparser.ConfigParser:
        """Load and validate configuration file"""
        config = configparser.ConfigParser()
        config.read(config_path)
        return config

    def _get_smtp_password(self) -> str:
        """Retrieve SMTP password from API"""
        try:
            api_config = self.config['API']
            ssl_config = self.config['SSL']

            response = requests.get(
                api_config['url'],
                params={
                    'AppID': api_config['app_id'],
                    'Safe': api_config['Safe'],
                    'UserName': api_config['username'],
                    'Address': api_config['address']
                },
                cert=(ssl_config['cert_path'], ssl_config['key_path']),
                verify=ssl_config['ca_cert_path'],
                timeout=30
            )

            if response.status_code == 200:
                return response.json().get('Content')
            else:
                logger.error(f"Failed to get password. Status code: {response.status_code}")
                return None

        except Exception as e:
            logger.error(f"Error retrieving password: {str(e)}")
            return None

    def send_test_email(self):
        """Send test email using configuration settings"""
        try:
            # Get email configuration
            smtp_config = self.config['SMTP']
            email_config = self.config['Email']

            # Create message
            msg = MIMEMultipart()
            msg['From'] = email_config['from_address']  # commsurv.ops@macquarie.com
            msg['To'] = email_config['to_address']      # raghu.venkatachalapathy@macquarie.com
            msg['Subject'] = email_config['subject']    # Tester EML

            # Add body
            body = email_config['message_body']         # This is a test email.
            msg.attach(MIMEText(body, 'plain'))

            # Connect to SMTP server
            server = smtplib.SMTP(smtp_config['server'], int(smtp_config['port']))
            server.starttls()
            
            # Use configured password
            smtp_password = smtp_config['smtp_password']  # Use the password from config
            
            # Login and send
            server.login(smtp_config['username'], smtp_password)
            text = msg.as_string()
            server.sendmail(msg['From'], msg['To'], text)
            
            logger.info("Test email sent successfully")
            
            # Close connection
            server.quit()

        except Exception as e:
            logger.error(f"Failed to send test email: {str(e)}")
            raise

def main():
    """Main execution function"""
    try:
        # Initialize sender
        sender = EmailSender()
        
        # Send test email
        sender.send_test_email()
        
        logger.info("Email sending completed successfully")
        
    except Exception as e:
        logger.error(f"Email sending failed: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

And here's the corresponding `config.ini` file based on your screenshot:

```ini
[API]
url = https://cyberark-ccp.lb.macbank/AIMWebService/api/Accounts
app_id = AP012815-PRD
Safe = CP-AP012815-SYS-PRD-INT
username = rng_commsurv_email
address = NTADMIN

[SSL]
cert_path = /tmp/test1/FOR-Risk-DigitalReasoning-CyberArk-use.pem
key_path = /tmp/test1/private-key.key
ca_cert_path = /tmp/test1/Macquarie-Root-CA.cer

[SMTP]
server = smtpauthrelay.lb.macbank
port = 587
username = commsurv.ops@macquarie.com
smtp_password = DY2[aperq-vIQ@y

[Email]
from_address = commsurv.ops@macquarie.com
to_address = raghu.venkatachalapathy@macquarie.com
subject = Tester EML
message_body = This is a test email.
extensions = .eml
source_directory = /tmp/test1/
```

Key changes made:
1. Used the exact SMTP server and port from your config
2. Used the specific email addresses shown in your config
3. Included the subject and message body from your config
4. Maintained the SSL certificate paths as shown
5. Used the exact API endpoint and credentials from your config
6. Simplified the email sending process to focus on the test email case
7. Maintained all the specific paths and directories from your config

To use this:
1. Save both files in the same directory
2. Run with: `python email_sender.py`

The script will send a test email using the exact configuration shown in your screenshot. Would you like me to explain any part in more detail?
