 Hereâ€™s a rewritten version of your script based on your request to remove "FW:" from the subject, send the subject as is, and send only EML files as attachments one by one:

import os
import sys
import smtplib
import logging
import configparser
import email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email import encoders
from typing import List
from pathlib import Path

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('email_sender.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class EmailSender:
    def __init__(self, config_path: str = 'config.ini'):
        self.config = self._load_config(config_path)
        self.smtp_server = None

    def _load_config(self, config_path: str) -> configparser.ConfigParser:
        config = configparser.ConfigParser()
        config.read(config_path)
        return config

    def _connect_smtp(self):
        """Establish SMTP connection"""
        try:
            smtp_config = self.config['SMTP']
            server = smtplib.SMTP(smtp_config['server'], int(smtp_config['port']))
            server.starttls()
            server.login(smtp_config['username'], smtp_config['smtp_password'])
            return server
        except Exception as e:
            logger.error(f"SMTP Connection failed: {str(e)}")
            raise

    def _get_eml_files(self) -> List[Path]:
        """Get list of all .eml files from the source directory"""
        source_dir = Path(self.config['Email']['source_directory'])
        return list(source_dir.glob('*.eml'))

    def _process_eml_file(self, eml_path: Path) -> tuple:
        """Extract subject and create attachment from EML file"""
        try:
            with open(eml_path, 'r') as eml_file:
                eml_content = eml_file.read()
                
            # Parse the EML file
            eml_message = email.message_from_string(eml_content)
            
            # Get subject from EML
            subject = eml_message.get('Subject', 'No Subject')
            
            # Create attachment
            attachment = MIMEApplication(eml_content.encode(), _subtype='eml')
            attachment.add_header('Content-Disposition', 'attachment', 
                                  filename=eml_path.name)
            
            return subject, attachment

        except Exception as e:
            logger.error(f"Error processing EML file {eml_path}: {str(e)}")
            raise

    def send_eml_attachments(self):
        """Send emails with EML attachments"""
        try:
            # Get email configuration
            email_config = self.config['Email']
            from_addr = email_config['from_address']
            to_addr = email_config['to_address']

            # Get list of EML files
            eml_files = self._get_eml_files()
            if not eml_files:
                logger.warning("No EML files found in source directory")
                return

            # Connect to SMTP server
            server = self._connect_smtp()

            # Process each EML file
            for eml_path in eml_files:
                try:
                    # Create new message for each EML
                    msg = MIMEMultipart()
                    msg['From'] = from_addr
                    msg['To'] = to_addr
                    
                    # Get subject and attachment from EML
                    subject, attachment = self._process_eml_file(eml_path)
                    msg['Subject'] = subject  # Send the subject as is

                    # Attach EML file (No body needed, sending EML directly)
                    msg.attach(attachment)

                    # Send email
                    server.send_message(msg)
                    logger.info(f"Successfully sent email with attachment: {eml_path.name}")

                except Exception as e:
                    logger.error(f"Failed to send {eml_path.name}: {str(e)}")
                    continue

            # Close connection
            server.quit()
            logger.info("All EML files processed")

        except Exception as e:
            logger.error(f"Email sending process failed: {str(e)}")
            if 'server' in locals():
                server.quit()
            raise

def main():
    try:
        sender = EmailSender()
        sender.send_eml_attachments()
        logger.info("Email sending completed successfully")
    except Exception as e:
        logger.error(f"Process failed: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()

Changes:

1. Subject: The subject line is now sent "as is," without any modification (i.e., no "FW:" prefix).


2. Attachments Only: The body of the email has been removed since your request is to send only the .eml files as attachments.


3. File Processing: Each .eml file is processed and sent individually as an attachment in its own email.



This version sends the .eml files from the current directory without modifying the subject, and without forwarding or adding any additional text. Let me know if you need further modifications!

