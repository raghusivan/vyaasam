To modify your script so it can handle sending emails from each specified "new" folder (rmg/shield/emails/direct/new and rmg/shield/emails/journals/new) and then move each processed file to the respective "processed" folder, I’ve added logic to loop through each folder and handle email sending and moving.

Here’s the updated Python code:

import boto3
import smtplib
from botocore.exceptions import ClientError
import logging

# Initialize logger
logger = logging.getLogger()
logging.basicConfig(level=logging.INFO)

# S3 bucket name and folder paths
bucket_name = "your-bucket-name"
folders = [
    {"new": "rmg/shield/emails/direct/new/", "processed": "rmg/shield/emails/direct/processed/"},
    {"new": "rmg/shield/emails/journals/new/", "processed": "rmg/shield/emails/journals/processed/"}
]

# Initialize S3 client
s3_client = boto3.client('s3')

def move_file_to_processed(s3_client, file_key, processed_folder):
    copy_source = {'Bucket': bucket_name, 'Key': file_key}
    processed_key = file_key.replace("new/", "processed/")
    s3_client.copy_object(Bucket=bucket_name, CopySource=copy_source, Key=processed_key)
    s3_client.delete_object(Bucket=bucket_name, Key=file_key)
    logger.info(f"Moved file {file_key} to {processed_folder}")

def send_emails_from_folder(folder):
    # Establish SMTP connection
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.ehlo()
        server.starttls()
        server.login(smtp_user, smtp_password)

        # List .eml files in the 'new' folder
        response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=folder['new'])
        if 'Contents' not in response:
            logger.info(f"No files found in the '{folder['new']}' folder.")
            return

        # Process each .eml file
        for item in response['Contents']:
            file_key = item['Key']
            logger.info(f"Processing file: {file_key}")

            # Download the file content directly from S3
            obj = s3_client.get_object(Bucket=bucket_name, Key=file_key)
            raw_content = obj['Body'].read().decode('utf-8')  # Assuming .eml files are UTF-8 encoded

            # Extract subject line from the raw content
            subject = ""
            for line in raw_content.splitlines():
                if line.startswith("Subject: "):
                    subject = line[9:]  # Remove "Subject: " prefix
                    break

            # Send the email with the extracted subject and raw content as body
            try:
                server.sendmail(from_address, to_address, f"Subject: {subject}\n\n{raw_content}")
                logger.info(f"Email sent successfully from: {from_address} using file: {file_key}")

                # Move the file to the 'processed' folder
                move_file_to_processed(s3_client, file_key, folder['processed'])

            except Exception as e:
                logger.error(f"Failed to send email for file {file_key}: {e}")

# Iterate over each folder to send emails and move files
for folder in folders:
    send_emails_from_folder(folder)

Explanation of Changes:

1. Folder Configuration: Each folder path is specified in a folders list, where each dictionary has a new key for the source folder and a processed key for the destination folder.


2. move_file_to_processed Function: Copies the file from the new folder to the processed folder, then deletes the original file in the new folder.


3. send_emails_from_folder Function: Handles the listing, downloading, subject extraction, email sending, and moving of each file in the new folder. After each email is successfully sent, the file is moved to the processed folder.


4. Looping through Folders: The main loop iterates over each folder dictionary in folders, applying the send_emails_from_folder function.



Notes:

Replace "your-bucket-name" with the actual name of your S3 bucket.

Ensure that SMTP credentials (smtp_server, smtp_port, smtp_user, smtp_password, from_address, and to_address) are defined and valid.

This code assumes that .eml files in the specified folders are UTF-8 encoded.


Running this script will send emails from both new folders and move successfully sent emails to their respective processed folders.

