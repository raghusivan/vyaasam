 To request a delivery receipt (or Delivery Status Notification, DSN) when an email is delivered to the recipient’s mail server, we need to use specific headers in the email message. However, whether or not you receive a delivery receipt depends on the recipient’s mail server and its configuration.

Here's how you can modify your Python script to request a delivery receipt:

Key Header:

Return-Receipt-To: Requests that the recipient’s mail server send you a delivery receipt when the message is successfully delivered.


Here’s the updated Python script:

Modified Python Script to Request a Delivery Receipt:

import os
import smtplib
import socket
import ConfigParser
from email import message_from_file
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# Read configuration from config.ini
config = ConfigParser.ConfigParser()
config.read('config.ini')

# SMTP Configuration
smtp_server = config.get('SMTP', 'smtp_server')
smtp_port = config.getint('SMTP', 'smtp_port')
smtp_user = config.get('SMTP', 'smtp_user')
smtp_password = config.get('SMTP', 'smtp_password')

# Email Configuration
extensions = [ext.strip() for ext in config.get('Email', 'extensions').split(',')]

# Function to send .eml files as attachments, using subject from the .eml and requesting delivery/read receipts
def send_eml_files():
    try:
        # Create an SMTP connection
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.set_debuglevel(1)  # Enable detailed debugging output to see all communication with the SMTP server
        server.ehlo()
        server.starttls()  # Secure the connection
        server.ehlo()

        # Login
        server.login(smtp_user, smtp_password)

        # Process each .eml file
        for filename in os.listdir('.'):  # Iterate through files in the current directory
            if os.path.isfile(filename) and any(filename.endswith(ext) for ext in extensions):  # Filter based on extension
                print("Processing file: {}".format(filename))
                with open(filename, 'r') as eml_file:
                    msg = message_from_file(eml_file)  # Read the .eml file as an email message

                    # Get the subject from the .eml file
                    subject = str(msg['Subject'])

                    # Create a multipart message
                    email_msg = MIMEMultipart()
                    email_msg['From'] = smtp_user
                    email_msg['To'] = config.get('Email', 'to_address')  # Assuming the recipient is set in config
                    email_msg['Subject'] = subject  # Use subject from .eml

                    # Add headers for Delivery Receipt and Read Receipt
                    email_msg.add_header('Disposition-Notification-To', smtp_user)  # Request read receipt
                    email_msg.add_header('Return-Receipt-To', smtp_user)  # Request delivery receipt

                    # Attach a simple text body (optional)
                    body = "Please see the attached journal file."
                    email_msg.attach(MIMEText(body, 'plain'))

                    # Attach the .eml file
                    with open(filename, 'rb') as attachment_file:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment_file.read())
                        encoders.encode_base64(part)
                        part.add_header('Content-Disposition', 'attachment; filename="{}"'.format(filename))
                        email_msg.attach(part)

                    # Send the email with attachment
                    try:
                        response = server.sendmail(email_msg['From'], email_msg['To'], email_msg.as_string())

                        # Print the response from the SMTP server
                        if response == {}:
                            print("Email successfully sent and accepted for delivery: {}".format(filename))
                        else:
                            print("Email sent with response: {}, filename: {}".format(response, filename))

                    except smtplib.SMTPResponseException as smtp_error:
                        # Catch specific SMTP errors and print the error code and message
                        print("SMTP error occurred: Code: {}, Message: {}".format(smtp_error.smtp_code, smtp_error.smtp_error))

        # Close the connection
        server.quit()

    except Exception as e:
        print("Failed to send email: {}".format(e))

# Function to test if SMTP port is open
def check_smtp_port():
    try:
        socket.create_connection((smtp_server, smtp_port), timeout=10)
        print("Connection to {} on port {} is successful.".format(smtp_server, smtp_port))
    except Exception as e:
        print("Failed to connect to {} on port {}: {}".format(smtp_server, smtp_port, e))

if __name__ == "__main__":
    # Check SMTP connection
    check_smtp_port()

    # Send emails with .eml files as attachments
    send_eml_files()

Key Changes:

1. Request Delivery Receipt (Return-Receipt-To):

This header requests a delivery receipt when the recipient's server successfully delivers the email.

The receipt will be sent to the email address specified in the Return-Receipt-To header (in this case, the same as the sender's address).



2. Read Receipt (Disposition-Notification-To):

The Disposition-Notification-To header requests a read receipt, which asks the recipient's email client to notify you when the email is opened. However, this depends on the recipient's client configuration, and they can choose to deny sending a read receipt.




Notes:

Delivery Receipts: Delivery receipts are dependent on the recipient’s mail server supporting and sending them. Some servers might not honor the Return-Receipt-To header.

Read Receipts: Not all email clients support or send read receipts. Recipients can also disable sending read receipts.


Next Steps:

1. Run the Script: This version will request both delivery and read receipts.


2. Monitor Your Inbox: Check if you receive any delivery receipts or read receipts after sending the email.


3. Check SMTP Server Logs: If you want to further monitor delivery confirmations, check the logs of your SMTP server for delivery attempts and responses from the recipient’s mail server.



Let me know if you need further assistance or clarifications!

