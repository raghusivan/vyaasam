 To ensure that the sender address used is always the one specified in config.ini, let’s simplify the code to remove any other sender configurations. This version will always use the from_address from config.ini as both the envelope sender and the "From" header in the email content.

Additionally, I'll address the pytz issue by explicitly setting utc to avoid further errors.

Here’s the updated code:

import os
import smtplib
import logging
from email import message_from_file
from email.utils import formataddr
from configparser import ConfigParser
from datetime import datetime
import pytz

# Configure logging
class SydneyTimeFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        utc_dt = datetime.utcfromtimestamp(record.created)
        sydney_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(pytz.timezone('Australia/Sydney'))
        return sydney_dt.strftime('%Y-%m-%d %H:%M:%S')

logging.basicConfig(
    filename='email_sender.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger()
for handler in logger.handlers:
    handler.setFormatter(SydneyTimeFormatter('%(asctime)s - %(levelname)s - %(message)s'))

# Read configuration from config.ini
config = ConfigParser()
config.read('config.ini')

# SMTP Configuration
smtp_server = config.get('SMTP', 'smtp_server')
smtp_port = config.getint('SMTP', 'smtp_port')
smtp_user = config.get('SMTP', 'smtp_user')
smtp_password = config.get('SMTP', 'smtp_password')

# Email Configuration
from_address = config.get('Email', 'from_address')  # Use this as the "From" address
to_address = config.get('Email', 'to_address')
extensions = [ext.strip() for ext in config.get('Email', 'extensions').split(',')]

# Function to send raw content of .eml files
def send_raw_eml_files():
    try:
        # Establish SMTP connection
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(smtp_user, smtp_password)
        
        # Process each .eml file
        for filename in os.listdir('.'):
            if os.path.isfile(filename) and any(filename.endswith(ext) for ext in extensions):
                logging.info(f"Processing file: {filename}")
                
                # Open and read the .eml file
                with open(filename, 'r') as eml_file:
                    msg = message_from_file(eml_file)
                
                # Set the "From" header to match the config `from_address`
                msg.replace_header('From', from_address)
                
                # Log the details
                subject = msg['Subject']
                logging.info(f"Using Config 'From' Address: {from_address}")
                logging.info(f"To Address: {to_address}")
                logging.info(f"Subject: {subject}")

                # Send the raw email content using `from_address` as both the envelope sender and "From" header
                server.sendmail(from_address, to_address, msg.as_string())
                logging.info(f"Email sent successfully from: {from_address} using file: {filename}")
        
        # Close the SMTP connection
        server.quit()
        
    except Exception as e:
        logging.error(f"Failed to send email: {e}")

# Execute the function
send_raw_eml_files()

Explanation of Changes

1. Fixed pytz Issue: Used pytz.utc explicitly.


2. Always Use from_address: The from_address from config.ini is used as both the envelope sender in sendmail() and the "From" header in the email.


3. Simplified Logging: Logs show the sender, recipient, and subject for clarity.



This should ensure that the from_address specified in config.ini is consistently used, avoiding permission issues from mismatched sender addresses. Please try running this version and let me know if it resolves the issue.

