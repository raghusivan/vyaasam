import boto3
import os
import requests
from configparser import ConfigParser
from botocore.exceptions import ClientError

# Assume this config object is initialized elsewhere in your Lambda code
config = ConfigParser()
config.read('/path/to/your/config.ini')  # Update this path if necessary for your Lambda setup

def get_smtp_password():
    try:
        # Initialize S3 client
        s3_client = boto3.client('s3')
        bucket_name = config.get('S3', 'bucket_name')  # Ensure this is set in your config

        # Define the specific folder path in S3 for certificates
        s3_folder = "rmg/shield/emails/certs/"

        # Temporary directory for Lambda is /tmp
        temp_dir = "/tmp"

        # File names to be downloaded from S3
        cert_files = {
            'cert.pem': 'cert_path',
            'key.pem': 'key_path',
            'ca_cert.pem': 'ca_cert_path'
        }
        local_paths = {}

        # Download each certificate file from S3 to /tmp
        for file_name, config_key in cert_files.items():
            s3_key = f"{s3_folder}{file_name}"
            local_path = os.path.join(temp_dir, file_name)
            try:
                # Download the certificate from S3 to the Lambda temp directory
                s3_client.download_file(bucket_name, s3_key, local_path)
                local_paths[config_key] = local_path
                print(f"Downloaded {file_name} to {local_path}")
            except ClientError as e:
                print(f"Failed to download {file_name} from S3: {e}")
                return None

        # Prepare API request config
        api_config = config['API']

        # Make the API request using the downloaded certificates
        response = requests.get(
            api_config['url'],
            params={
                'AppID': api_config['app_id'],
                'Safe': api_config['safe'],
                'UserName': api_config['username'],
                'Address': api_config['address']
            },
            cert=(local_paths['cert_path'], local_paths['key_path']),
            verify=local_paths['ca_cert_path'],
            timeout=30
        )

        if response.status_code == 200:
            return response.json().get('Content')
        else:
            print(f"Failed to get password. Status code: {response.status_code}")
            return None

    except Exception as e:
        print(f"Error retrieving password: {str(e)}")
        return None
