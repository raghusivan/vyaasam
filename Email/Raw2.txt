To ensure that your Python code sends the email exactly as seen in the screenshot, including the headers and X-RCPT-TO, we need to take the following steps:

1. Parse .eml File with All Headers: Use the .eml file as raw content to keep all headers (including Return-path, X-RCPT-TO, etc.) unaltered.


2. Send as Raw Content: Ensure the SMTP client sends each line as it is, including all headers without modification.


3. Use sendmail with Full Control: To retain control over headers and envelope sender, sendmail can be used in a way that sends the email in raw format.



Here is the revised code that should meet these requirements:

import os
import smtplib
import logging
from configparser import ConfigParser
from datetime import datetime
import pytz

# Configure logging
class SydneyTimeFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        utc_dt = datetime.utcfromtimestamp(record.created)
        sydney_dt = utc_dt.replace(tzinfo=pytz.utc).astimezone(pytz.timezone('Australia/Sydney'))
        return sydney_dt.strftime('%Y-%m-%d %H:%M:%S')

logging.basicConfig(
    filename='email_sender.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger()
for handler in logger.handlers:
    handler.setFormatter(SydneyTimeFormatter('%(asctime)s - %(levelname)s - %(message)s'))

# Read configuration from config.ini
config = ConfigParser()
config.read('config.ini')

# SMTP Configuration
smtp_server = config.get('SMTP', 'smtp_server')
smtp_port = config.getint('SMTP', 'smtp_port')
smtp_user = config.get('SMTP', 'smtp_user')
smtp_password = config.get('SMTP', 'smtp_password')

# Email Configuration
from_address = config.get('Email', 'from_address')  # Use this as the "From" address
to_address = config.get('Email', 'to_address')
extensions = [ext.strip() for ext in config.get('Email', 'extensions').split(',')]

# Function to send raw content of .eml files
def send_raw_eml_files():
    try:
        # Establish SMTP connection
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(smtp_user, smtp_password)
        
        # Process each .eml file
        for filename in os.listdir('.'):
            if os.path.isfile(filename) and any(filename.endswith(ext) for ext in extensions):
                logging.info(f"Processing file: {filename}")
                
                # Read the entire .eml file as raw content
                with open(filename, 'r') as eml_file:
                    raw_content = eml_file.read()
                
                # Log the details for verification
                logging.info(f"Using Config 'From' Address: {from_address}")
                logging.info(f"To Address (X-RCPT-TO): {to_address}")

                # Send the email with raw content, ensuring 'from_address' is used as the envelope sender
                server.sendmail(from_address, to_address, raw_content)
                logging.info(f"Email sent successfully from: {from_address} using file: {filename}")
        
        # Close the SMTP connection
        server.quit()
        
    except Exception as e:
        logging.error(f"Failed to send email: {e}")

# Execute the function
send_raw_eml_files()

Explanation of How It Works:

1. Use .eml File as Raw Content: The .eml file is read entirely, preserving all headers, body content, and any custom headers such as X-RCPT-TO.


2. sendmail Function with Raw Content: By using server.sendmail(from_address, to_address, raw_content), the content (including X-RCPT-TO and other headers) is sent as-is.


3. Envelope and Header Control: The from_address in config.ini is used as the envelope sender, which should be acceptable for the SMTP server and meet your configuration requirements.



Notes:

X-RCPT-TO Header: This header is preserved as long as it exists within the .eml file content.

Logging: Logs provide details about the from_address, to_address (as X-RCPT-TO), and the filename for confirmation.


This setup should meet the exact requirements shown in your screenshot by ensuring that the email is sent line-by-line in the same structure as specified in the .eml file. Let me know if this fulfills your requirements.

