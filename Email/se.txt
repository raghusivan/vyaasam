#!/bin/bash

# Define the SMTP server and port
SMTP_SERVER="smtpoutrelay.lb.macbank"
SMTP_PORT=587

# Add outbound rule to allow traffic to SMTP server on port 587
echo "Adding outbound rule for $SMTP_SERVER on port $SMTP_PORT..."
sudo iptables -A OUTPUT -p tcp --dport $SMTP_PORT -j ACCEPT

# Save the iptables rules to ensure they persist after reboot
echo "Saving iptables rules..."
sudo service iptables save

# Verify that the rule was added
echo "Verifying the iptables rule for outbound traffic..."
sudo iptables -L OUTPUT -v -n | grep $SMTP_PORT

echo "Outbound rule for SMTP server $SMTP_SERVER on port $SMTP_PORT has been added and saved."

========
#!/bin/bash

# IP address to allow
IP_ADDRESS="10.194.35.56"
PORT=587  # SMTP port

# Check if iptables is installed
if ! command -v iptables &> /dev/null; then
    echo "iptables is not installed. Please install it and try again."
    exit 1
fi

# Allow incoming traffic from the specified IP address on port 587 (SMTP)
echo "Allowing incoming traffic from $IP_ADDRESS on port $PORT..."
sudo iptables -A INPUT -p tcp -s $IP_ADDRESS --dport $PORT -j ACCEPT

# Save the iptables rule to persist it after a reboot
if [[ -f /etc/redhat-release ]]; then
    # For RedHat/CentOS-based distributions
    sudo service iptables save
elif [[ -f /etc/lsb-release ]]; then
    # For Ubuntu-based distributions
    sudo iptables-save > /etc/iptables/rules.v4
else
    echo "Could not detect the Linux distribution. Please manually save iptables rules."
    exit 1
fi

echo "Firewall rule added successfully for IP: $IP_ADDRESS on port $PORT."


==============
import socket

# Configuration for the test
smtp_server = 'smtpoutrelay.lb.macbank'
port = 587  # Standard port for SMTP with STARTTLS

def check_connectivity():
    try:
        print("Testing connectivity to {} on port {}...".format(smtp_server, port))
        # Create a TCP socket and attempt to connect to the SMTP server
        connection = socket.create_connection((smtp_server, port), timeout=10)
        print("Successfully connected to {} on port {}.".format(smtp_server, port))
        connection.close()
    except socket.timeout:
        print("Connection to {} timed out.".format(smtp_server))
    except socket.gaierror:
        print("Could not resolve the hostname {}. Please check DNS settings.".format(smtp_server))
    except Exception as e:
        print("An error occurred while connecting: {}".format(e))

if __name__ == "__main__":
    check_connectivity()





======

import smtplib
from smtplib import SMTP
import socket

# Configuration based on your mailx command
smtp_server = 'smtpoutrelay.lb.macbank:587'
smtp_user = 'rm.com'
smtp_password = 'bb'  # Update with actual password
from_address = smtp_user
to_address = ' .vunukachalasetty@ .com'
subject = "Test Email"
message_body = "This is a test email."

# Function to send an email
def send_test_email():
    try:
        # Create an SMTP connection
        with SMTP(smtp_server) as server:
            server.ehlo()  # Identify yourself to the server
            server.starttls()  # Secure the connection
            server.login(smtp_user, smtp_password)  # Login using credentials
            
            # Compose the email message
            message = f"Subject: {subject}\n\n{message_body}"
            
            # Send the email
            server.sendmail(from_address, to_address, message)
            print("Test email sent successfully!")
    
    except Exception as e:
        print(f"Failed to send email: {e}")

# Function to test if SMTP port is open
def check_smtp_port():
    try:
        # Check if port 587 is open
        server = smtp_server.split(':')[0]
        port = int(smtp_server.split(':')[1])
        socket.create_connection((server, port), timeout=10)
        print(f"Connection to {server} on port {port} is successful.")
    except Exception as e:
        print(f"Failed to connect to {server} on port {port}: {e}")

if __name__ == "__main__":
    # Check SMTP connection
    check_smtp_port()

    # Send a test email
    send_test_email()
