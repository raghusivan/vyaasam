Thanks for the additional clarification. Here's an updated version of the Python script that handles journal retrieval from an S3 bucket when available, and from a local folder if the S3 bucket is not accessible. The script will also log every step of the process to ensure all actions are tracked.

Folder Structure

Updated based on your requirements:

email-journal-sender/
│
├── config/
│   ├── config.ini               # Configuration file with all parameters
│
├── scripts/
│   └── send_journal_emails.py   # Python script to send journal emails
│
├── logs/
│   └── email_sender.log         # Log file for tracking email sending
│
├── local_journals/              # Optional: local folder for journal files
│
└── requirements.txt             # Dependencies

1. Configuration File (config/config.ini)

This updated configuration file reflects your updated requirements where you provide only the S3 bucket address, and the local folder is used as a fallback if S3 is not available.

[aws]
s3_bucket = your_s3_bucket_name
s3_folder = journals/

[smtp]
smtp_user = your_smtp_user@domain.com
smtp_password = your_smtp_password
smtp_server = smtpauthrelay.lb.macbank
smtp_port = 587

[email]
recipient_email = recipient@example.com
sender_email = sender@example.com
subject_prefix = Journal Email:

[settings]
throttle_seconds = 0.5
log_file = ../logs/email_sender.log
local_journal_folder = ../local_journals/

2. Updated Python Script (scripts/send_journal_emails.py)

import os
import time
import boto3
import smtplib
from configparser import ConfigParser
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging

# Setup logging
def setup_logging(log_file):
    logging.basicConfig(filename=log_file, 
                        level=logging.INFO, 
                        format='%(asctime)s - %(levelname)s - %(message)s')

# Load configuration from config file
def load_config(config_file):
    config = ConfigParser()
    config.read(config_file)
    return config

# Retrieve journal files from S3 bucket
def get_journal_files_from_s3(s3_client, bucket_name, folder):
    try:
        s3_objects = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=folder)
        journal_files = []

        if 'Contents' in s3_objects:
            for obj in s3_objects['Contents']:
                if obj['Key'].endswith(".txt"):  # Assuming journal files are in .txt format
                    journal_files.append(obj['Key'])

        logging.info(f"Retrieved {len(journal_files)} journal files from S3")
        return journal_files
    except Exception as e:
        logging.error(f"Failed to retrieve journal files from S3. Error: {str(e)}")
        return None

# Download file from S3
def download_journal_file(s3_client, bucket_name, s3_key, download_path):
    try:
        s3_client.download_file(bucket_name, s3_key, download_path)
        with open(download_path, 'r') as file:
            return file.read()
    except Exception as e:
        logging.error(f"Failed to download {s3_key} from S3. Error: {str(e)}")
        return None

# Retrieve journal files from local folder if S3 is not available
def get_journal_files_from_local(folder):
    try:
        journal_files = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".txt")]
        logging.info(f"Retrieved {len(journal_files)} journal files from local folder: {folder}")
        return journal_files
    except Exception as e:
        logging.error(f"Failed to retrieve journal files from local folder. Error: {str(e)}")
        return []

# Send email using SMTP
def send_email(smtp_server, smtp_port, smtp_user, smtp_password, sender, recipient, subject, body):
    msg = MIMEMultipart()
    msg['From'] = sender
    msg['To'] = recipient
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(smtp_user, smtp_password)
        server.sendmail(sender, recipient, msg.as_string())
        server.quit()
        logging.info(f"Email successfully sent to {recipient} with subject {subject}")
    except Exception as e:
        logging.error(f"Failed to send email to {recipient}. Error: {str(e)}")

def main():
    # Load configuration
    config = load_config("../config/config.ini")

    # AWS S3 settings
    s3_bucket = config.get('aws', 's3_bucket')
    s3_folder = config.get('aws', 's3_folder')

    # SMTP settings
    smtp_user = config.get('smtp', 'smtp_user')
    smtp_password = config.get('smtp', 'smtp_password')
    smtp_server = config.get('smtp', 'smtp_server')
    smtp_port = config.getint('smtp', 'smtp_port')

    # Email settings
    recipient_email = config.get('email', 'recipient_email')
    sender_email = config.get('email', 'sender_email')
    subject_prefix = config.get('email', 'subject_prefix')

    # Other settings
    throttle_seconds = config.getfloat('settings', 'throttle_seconds')
    log_file = config.get('settings', 'log_file')
    local_journal_folder = config.get('settings', 'local_journal_folder')

    # Setup logging
    setup_logging(log_file)

    # Initialize S3 client (assuming the server has access to the bucket)
    s3_client = boto3.client('s3')

    # Try to get the list of journal files from the S3 bucket
    journal_files = get_journal_files_from_s3(s3_client, s3_bucket, s3_folder)

    if journal_files is None or len(journal_files) == 0:
        logging.warning("Falling back to local folder since no journal files were found on S3")
        journal_files = get_journal_files_from_local(local_journal_folder)

    # Process each journal file
    for journal_file in journal_files:
        logging.info(f"Processing journal file: {journal_file}")

        if journal_file.startswith(s3_folder):
            # Download the journal file from S3
            journal_content = download_journal_file(s3_client, s3_bucket, journal_file, '/tmp/' + os.path.basename(journal_file))
        else:
            # Read the journal file from the local folder
            with open(journal_file, 'r') as file:
                journal_content = file.read()

        if journal_content:
            # Prepare email subject and body
            subject = f"{subject_prefix} {os.path.basename(journal_file)}"
            body = journal_content

            # Send the email
            send_email(smtp_server, smtp_port, smtp_user, smtp_password, sender_email, recipient_email, subject, body)

            # Throttle to avoid overwhelming the SMTP relay
            time.sleep(throttle_seconds)

if __name__ == "__main__":
    main()

3. Changes Made to the Python Script:

1. S3 Retrieval with Fallback to Local Folder:

The script now attempts to retrieve journal files from the S3 bucket first.

If S3 access fails or no journal files are found in the S3 bucket, it automatically falls back to a local folder (local_journals/) to retrieve journal files.



2. Logging:

The script logs all actions, including successful retrieval of files from S3 or local folder, email sending success, and any errors encountered during the process.



3. File Handling:

If journal files are retrieved from S3, they are temporarily downloaded to /tmp/.

If they are retrieved from a local folder, the files are directly read from the specified folder path.



4. Error Handling:

The script catches errors in each step (e.g., S3 access issues, email sending failures) and logs appropriate error messages.




4. Requirements File (requirements.txt)

boto3
configparser

Summary of Changes:

The Python script now follows best practices for logging and error handling.

The script retrieves journal files from an S3 bucket when available, but falls back to a local directory if needed.

The configuration settings, such as AWS bucket name, SMTP settings, and folder paths, are stored in a config file for flexibility.


